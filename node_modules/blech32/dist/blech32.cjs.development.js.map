{"version":3,"file":"blech32.cjs.development.js","sources":["../src/utils.ts","../src/blech32.ts","../src/blech32Addr.ts"],"sourcesContent":["export function convertBits(\n  bytes: number[],\n  from: number,\n  to: number,\n  pad: boolean\n): number[] {\n  if (from < 1 || from > 8 || to < 1 || from > 8) {\n    throw new Error(\"only bits groups between 1 and 8 are allowed\");\n  }\n\n  const regrouped: number[] = [];\n\n  let nextByte = 0;\n  let filledBits = 0;\n\n  for (const n of bytes) {\n    let b = n << (8 - from);\n    // How many bits remaining to extract from the input data.\n    let remFromBits = from;\n    while (remFromBits > 0) {\n      // How many bits remaining to be added to the next byte.\n      const remToBits = to - filledBits;\n\n      // The number of bytes to next extract is the minimum of\n      // remFromBits and remToBits.\n      let toExtract = remFromBits;\n      if (remToBits < toExtract) {\n        toExtract = remToBits;\n      }\n\n      // Add the next bits to nextByte, shifting the already\n      // added bits to the left.\n      nextByte = (nextByte << toExtract) | (b >> (8 - toExtract));\n\n      // Discard the bits we just extracted and get ready for\n      // next iteration.\n      b = (b << toExtract) % 256;\n      remFromBits -= toExtract;\n      filledBits += toExtract;\n\n      // If the nextByte is completely filled, we add it to\n      // our regrouped bytes and start on the next byte.\n      if (filledBits === to) {\n        regrouped.push(nextByte);\n        filledBits = 0;\n        nextByte = 0;\n      }\n    }\n  }\n\n  // We pad any unfinished group if specified.\n  if (pad && filledBits > 0) {\n    nextByte = nextByte << (to - filledBits);\n    regrouped.push(nextByte);\n    filledBits = 0;\n    nextByte = 0;\n  }\n\n  // Any incomplete group must be <= 4 bits, and all zeroes.\n  if (filledBits > 0 && (filledBits > 4 || nextByte !== 0)) {\n    throw new Error(\"invalid incomplete group of bits\");\n  }\n\n  return regrouped;\n}\n\nexport function validateWitnessVersion(version: number): void {\n  if (version < 0 || version > 16) {\n    throw new Error(\"invalid witness version\");\n  }\n}\n","import Long from \"long\";\nimport { validateWitnessVersion } from \"./utils\";\n\nconst CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\nexport const MAX_LEN = 1000;\n\nfunction hexToLong(hex: string): Long.Long {\n  return Long.fromString(hex, true, 16);\n}\n\nconst GENERATORS = [\n  \"7d52fba40bd886\",\n  \"5e8dbf1a03950c\",\n  \"1c3a3c74072a18\",\n  \"385d72fa0e5139\",\n  \"7093e5a608865b\"\n].map(hexToLong);\n\nexport type EncodingType = \"blech32\" | \"blech32m\";\nexport const BLECH32: EncodingType = \"blech32\";\nexport const BLECH32M: EncodingType = \"blech32m\";\n\nexport function getEncodingType(witnessVersion: number): EncodingType {\n  validateWitnessVersion(witnessVersion);\n  if (witnessVersion === 0) {\n    return BLECH32;\n  } else if (witnessVersion === 1) {\n    return BLECH32M;\n  } else {\n    throw new Error(\n      `Unsuported witness version (${witnessVersion}), only 0 (blech32) or 1 (blech32m) are supported`\n    );\n  }\n}\n\nfunction getEncodingConst(enc: EncodingType): Long.Long {\n  if (enc === BLECH32) {\n    return Long.fromNumber(1);\n  } else if (enc === BLECH32M) {\n    return hexToLong(\"455972a3350f7a1\");\n  } else {\n    throw new Error(\"Invalid encoding type\");\n  }\n}\n\nfunction polymod(values: number[]): Long.Long {\n  let chk = Long.fromNumber(1);\n  for (let p = 0; p < values.length; ++p) {\n    const top = chk.shiftRight(55);\n    chk = chk\n      .and(hexToLong(\"7fffffffffffff\"))\n      .shiftLeft(5)\n      .xor(values[p]);\n    for (let i = 0; i < 5; i++) {\n      if (\n        top\n          .shiftRight(Long.fromNumber(i))\n          .and(1)\n          .equals(1)\n      ) {\n        chk = chk.xor(GENERATORS[i]);\n      }\n    }\n  }\n  return chk;\n}\n\nfunction hrpExpand(hrp: string): Uint8Array {\n  const ret: number[] = [];\n\n  for (let p = 0; p < hrp.length; ++p) {\n    ret.push(hrp.charCodeAt(p) >> 5);\n  }\n\n  ret.push(0);\n\n  for (let p = 0; p < hrp.length; ++p) {\n    ret.push(hrp.charCodeAt(p) & 31);\n  }\n  return Uint8Array.from(ret);\n}\n\nfunction verifyChecksum(\n  hrp: string,\n  data: number[],\n  enc: EncodingType\n): boolean {\n  const hrpAndData = Array.from(hrpExpand(hrp)).concat(data);\n  return polymod(hrpAndData).equals(getEncodingConst(enc));\n}\n\nconst zeros = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nfunction createChecksum(\n  hrp: string,\n  data: Uint8Array,\n  enc: EncodingType\n): number[] {\n  const values = Array.from(hrpExpand(hrp))\n    .concat(Array.from(data))\n    .concat(zeros); // concat 12 zero\n\n  const mod = polymod(values).xor(getEncodingConst(enc));\n\n  const ret: Long.Long[] = [];\n  for (let p = 0; p < 12; ++p) {\n    ret.push(mod.shiftRight(5 * (11 - p)).and(31));\n  }\n  return ret.map(long => long.toInt());\n}\n\n// blech32 encode function\nexport function encode(\n  hrp: string,\n  data: Uint8Array,\n  enc: EncodingType\n): string {\n  const checkSum = createChecksum(hrp, data, enc);\n\n  const combined = Array.from(data).concat(checkSum);\n  let ret = hrp + \"1\";\n  for (let p = 0; p < combined.length; ++p) {\n    ret += CHARSET.charAt(combined[p]);\n  }\n  return ret;\n}\n\n// blech32 decode function\nexport function decode(\n  blechString: string,\n  enc: EncodingType\n): { hrp: string; data: Uint8Array } {\n  let has_lower = false;\n  let has_upper = false;\n  for (let p = 0; p < blechString.length; ++p) {\n    if (blechString.charCodeAt(p) < 33 || blechString.charCodeAt(p) > 126) {\n      throw new Error(\"Invalid charcode in blech32 string\");\n    }\n    if (blechString.charCodeAt(p) >= 97 && blechString.charCodeAt(p) <= 122) {\n      has_lower = true;\n    }\n    if (blechString.charCodeAt(p) >= 65 && blechString.charCodeAt(p) <= 90) {\n      has_upper = true;\n    }\n  }\n  if (has_lower && has_upper) {\n    throw new Error(\"blech32 has lowercases AND uppercases\");\n  }\n\n  blechString = blechString.toLowerCase();\n  const pos = blechString.lastIndexOf(\"1\");\n  if (pos < 1 || pos + 13 > blechString.length) {\n    throw new Error('Invalid index of \"1\"');\n  }\n  const hrp = blechString.substring(0, pos);\n  const data: number[] = [];\n  for (let p = pos + 1; p < blechString.length; ++p) {\n    const d = CHARSET.indexOf(blechString.charAt(p));\n    if (d === -1) {\n      throw new Error(\n        `\"${blechString.charAt(p)}\" is not allowed in blech32 strings`\n      );\n    }\n    data.push(d);\n  }\n\n  if (!verifyChecksum(hrp, data, enc)) {\n    throw new Error(`invalid ${enc} checksum \"${blechString}\"`);\n  }\n\n  return { hrp: hrp, data: Uint8Array.from(data.slice(0, data.length - 12)) };\n}\n","import { EncodingType } from \".\";\nimport { decode, encode, MAX_LEN, getEncodingType } from \"./blech32\";\nimport { convertBits, validateWitnessVersion } from \"./utils\";\n\ninterface Blech32AddressData {\n  witness: string;\n  blindingPublicKey: string;\n  witnessVersion: number;\n  hrp: string;\n}\n\n/**\n * encodeAddress encodes data\n * @param hrp human readeable part\n * @param witnessProgram witnessProgram = pubkey + witness\n * @param witnessVersion witness version\n */\nfunction encodeAddress({\n  witness,\n  witnessVersion,\n  blindingPublicKey,\n  hrp\n}: Blech32AddressData): string {\n  validateWitnessVersion(witnessVersion);\n\n  const witnessProgram = Buffer.concat([\n    Buffer.from(blindingPublicKey, \"hex\"),\n    Buffer.from(witness, \"hex\")\n  ]);\n  const witnessProgLength = witnessProgram.length;\n\n  if (\n    witnessVersion === 0 &&\n    witnessProgLength !== 53 &&\n    witnessProgLength !== 65\n  )\n    throw new Error(\n      \"witness version 0 needs witness program length = 53 OR = 65\"\n    );\n\n  if (witnessProgLength < 2 || witnessProgLength > 65)\n    throw new Error(\"witness program length should be >= 2 and <= 65\");\n\n  const data = [\n    witnessVersion,\n    ...convertBits(Array.from(witnessProgram), 8, 5, true)\n  ];\n  return encode(hrp, Uint8Array.from(data), getEncodingType(data[0]));\n}\n\n/**\n * decodeAddress decodes a segwit string address.\n * @param addr the blech32 encoded string.\n * @param encodingType the encoding type.\n */\nfunction decodeAddress(addr: string, enc: EncodingType): Blech32AddressData {\n  const { hrp, data } = decode(addr, enc);\n\n  const witnessVersion = data[0];\n  validateWitnessVersion(witnessVersion);\n\n  if (data.length === 0 || data.length > MAX_LEN)\n    throw new Error(\"Invalid data length\");\n\n  const witnessProgram = convertBits(Array.from(data.slice(1)), 5, 8, false);\n  if (witnessProgram.length < 2 || witnessProgram.length > 65)\n    throw new Error(\"Invalid witness data length\");\n\n  if (\n    data[0] === 0 &&\n    witnessProgram.length !== 53 &&\n    witnessProgram.length !== 65\n  )\n    throw new Error(\"Invalid witness data length for witness version 0\");\n\n  const blindingPublicKey = Buffer.from(witnessProgram.slice(0, 33)).toString(\n    \"hex\"\n  );\n  const witness = Buffer.from(witnessProgram.slice(33)).toString(\"hex\");\n\n  return {\n    witness,\n    blindingPublicKey,\n    witnessVersion,\n    hrp\n  };\n}\n\n/**\n * a class wrapping the encodeAddress and decodeAddress functions.\n */\nexport class Blech32Address {\n  address: string;\n  witnessVersion: number;\n  blindingPublicKey: string;\n  witness: string;\n\n  private constructor(data: Blech32AddressData) {\n    this.witness = data.witness;\n    this.blindingPublicKey = data.blindingPublicKey;\n    this.witnessVersion = data.witnessVersion;\n    this.address = encodeAddress(data);\n  }\n\n  static from(\n    witness: string,\n    blindingPublicKey: string,\n    hrp: string,\n    witnessVersion: number\n  ) {\n    return new Blech32Address({\n      witness,\n      witnessVersion,\n      blindingPublicKey,\n      hrp\n    });\n  }\n\n  static fromString(\n    blechString: string,\n    encodingType: EncodingType\n  ): Blech32Address {\n    return new Blech32Address(decodeAddress(blechString, encodingType));\n  }\n}\n"],"names":["convertBits","bytes","from","to","pad","Error","regrouped","nextByte","filledBits","n","b","remFromBits","remToBits","toExtract","push","validateWitnessVersion","version","CHARSET","MAX_LEN","hexToLong","hex","Long","fromString","GENERATORS","map","BLECH32","BLECH32M","getEncodingType","witnessVersion","getEncodingConst","enc","fromNumber","polymod","values","chk","p","length","top","shiftRight","and","shiftLeft","xor","i","equals","hrpExpand","hrp","ret","charCodeAt","Uint8Array","verifyChecksum","data","hrpAndData","Array","concat","zeros","createChecksum","mod","long","toInt","encode","checkSum","combined","charAt","decode","blechString","has_lower","has_upper","toLowerCase","pos","lastIndexOf","substring","d","indexOf","slice","encodeAddress","witness","blindingPublicKey","witnessProgram","Buffer","witnessProgLength","decodeAddress","addr","toString","Blech32Address","address","encodingType"],"mappings":"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"}