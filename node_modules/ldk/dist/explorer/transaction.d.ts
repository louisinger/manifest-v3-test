import UnblindError from '../error/unblind-error';
import { BlindingKeyGetter, BlindingKeyGetterAsync, TxInterface } from '../types';
/**
 * Return an async generator fetching and unblinding addresses' transactions
 * @param addresses
 * @param blindingKeyGetter
 * @param explorerUrl
 * @param skip optional, can be used to skip certain transaction
 */
export declare function fetchAndUnblindTxsGenerator(addresses: string[], blindingKeyGetter: BlindingKeyGetter, explorerUrl: string, skip?: (tx: TxInterface) => boolean): AsyncGenerator<TxInterface, {
    txIDs: string[];
    errors: Error[];
}, undefined>;
/**
 * Use FetchAndUnblindTxsGenerator to get all utxos for a set of addresses
 * @param addresses
 * @param blindingKeyGetter
 * @param explorerUrl
 * @param skip optional
 */
export declare function fetchAndUnblindTxs(addresses: string[], blindingKeyGetter: BlindingKeyGetter, explorerUrl: string, skip?: (tx: TxInterface) => boolean): Promise<TxInterface[]>;
/**
 * takes the a TxInterface and try to transform BlindedOutputInterface to UnblindedOutputInterface (prevouts & outputs)
 * @param tx transaction to unblind
 * @param blindingPrivateKeys the privateKeys using to unblind the outputs.
 */
export declare function unblindTransaction(tx: TxInterface, blindingPrivateKeyGetter: BlindingKeyGetterAsync): Promise<{
    unblindedTx: TxInterface;
    errors: UnblindError[];
}>;
