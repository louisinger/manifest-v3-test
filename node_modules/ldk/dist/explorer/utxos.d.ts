import { TinySecp256k1Interface } from 'ecpair';
import { AddressInterface, TxInterface, UnblindedOutput, Output } from '../types';
/**
 * fetchAndUnblindUtxosGenerator returns the unblinded utxos associated with a set of addresses.
 * @param addressesAndBlindingKeys the set of addresses with blinding key (if confidential)
 * @param url esplora URL
 * @param skip optional, using to skip blinding step
 */
export declare function fetchAndUnblindUtxosGenerator(ecclib: TinySecp256k1Interface, addressesAndBlindingKeys: AddressInterface[], url: string, skip?: (utxo: Output) => boolean): AsyncGenerator<UnblindedOutput, {
    numberOfUtxos: number;
    errors: Error[];
}, undefined>;
export declare function fetchAndUnblindUtxos(ecclib: TinySecp256k1Interface, addressesAndBlindingKeys: AddressInterface[], url: string, skip?: (utxo: Output) => boolean): Promise<UnblindedOutput[]>;
/**
 * try to unblind the utxo with blindPrivKey. if unblind fails, return utxo
 * if unblind step success: set prevout & unblindData members in UtxoInterface result
 * @param utxo utxo to unblind
 * @param blindPrivKey the blinding private key using to unblind
 * @param url esplora endpoint URL
 */
export declare function tryToUnblindUtxo(utxo: Output, blindPrivKey: string): Promise<UnblindedOutput>;
/**
 * Reduce a set of transactions using a set of scripts
 * @param txs the wallet's transactions
 * @param walletScripts the set of scripts to use in order to filter tx's outputs
 * @param initialState initial utxos state (set in txs reducer) - optional (default: [])
 */
export declare function utxosFromTransactions(txs: TxInterface[], walletScripts: Set<string>, initialState?: (Output | UnblindedOutput)[]): (Output | UnblindedOutput)[];
