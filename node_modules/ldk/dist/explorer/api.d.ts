import { AxiosInstance } from 'axios';
import { Outpoint, Output, TxInterface } from '../types';
import { EsploraTx, EsploraUtxo } from './types';
export interface ChainAPI {
    fetchUtxos(addresses: string[], skip?: (utxo: EsploraUtxo) => boolean): Promise<Output[]>;
    fetchTxs(addresses: string[], skip?: (esploraTx: EsploraTx) => boolean): Promise<TxInterface[]>;
    fetchTxsHex(txids: string[]): Promise<{
        txid: string;
        hex: string;
    }[]>;
    addressesHasBeenUsed(addresses: string[]): Promise<boolean[]>;
}
/**
 * Esplora is the ChainAPI implmentation for regular esplora instance
 * Esplora also exports extra methods specific to esplora instance
 */
export declare class Electrs implements ChainAPI {
    readonly electrsURL: string;
    readonly axios: AxiosInstance;
    constructor(url: string, axiosIns?: AxiosInstance);
    static fromURL(url: string): Electrs;
    addressesHasBeenUsed(addresses: string[]): Promise<boolean[]>;
    fetchUtxos(addresses: string[], skip?: (utxo: EsploraUtxo) => boolean): Promise<Output[]>;
    fetchTxs(addresses: string[], skip?: (tx: EsploraTx) => boolean): Promise<TxInterface[]>;
    fetchTxHex(txid: string): Promise<string>;
    fetchTxsHex(txids: string[]): Promise<{
        txid: string;
        hex: string;
    }[]>;
    fetchTx(txid: string): Promise<TxInterface>;
    private fetchAllTxsForAddress;
    private fetch25newestTxsForAddress;
    protected outpointToUtxo(): (outpoint: Outpoint) => Promise<Output>;
}
export declare class ElectrsBatchServer extends Electrs implements ChainAPI {
    readonly batchServerURL: string;
    readonly electrsURL: string;
    constructor(batchServerURL: string, electrsURL: string, axiosIns?: AxiosInstance);
    static fromURL(_: string): ElectrsBatchServer;
    static fromURLs(url: string, electrsUrl: string): ElectrsBatchServer;
    addressesHasBeenUsed(addresses: string[]): Promise<boolean[]>;
    fetchUtxos(addresses: string[], skip?: (utxo: EsploraUtxo) => boolean): Promise<Output[]>;
    fetchTxsHex(txids: string[]): Promise<{
        txid: string;
        hex: string;
    }[]>;
    fetchTxs(addresses: string[], skip?: (tx: EsploraTx) => boolean): Promise<TxInterface[]>;
}
