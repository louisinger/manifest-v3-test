import { TxOutput, confidential } from 'liquidjs-lib';
/**
 * Enumeration of all the Identity types.
 */
export declare enum IdentityType {
    PrivateKey = 1,
    Mnemonic = 2,
    MasterPublicKey = 3,
    Inject = 4,
    Ledger = 5,
    Trezor = 6,
    MultisigWatchOnly = 7,
    Multisig = 8
}
/**
 * Defines the shape of the object returned by the getAdresses's method.
 * @member confidentialAddress the confidential address.
 * @member blindingPrivateKey the blinding private key associated to the confidential address.
 */
export interface AddressInterface {
    confidentialAddress: string;
    blindingPrivateKey: string;
    derivationPath?: string;
    publicKey?: string;
    [key: string]: any;
}
export declare type ChangeAddressFromAssetGetter = (asset: string) => string;
export declare type BlindingKeyGetter = (script: string) => string | undefined;
export declare type BlindingKeyGetterAsync = (script: string) => Promise<string | undefined>;
export interface RecipientInterface {
    value: number;
    asset: string;
    address: string;
}
export interface Outpoint {
    txid: string;
    vout: number;
}
export declare type Output = Outpoint & {
    prevout: TxOutput;
};
export declare type UnblindedOutput = Output & {
    unblindData: confidential.UnblindOutputResult;
};
export declare function isUnblindedOutput(output: Output): output is UnblindedOutput;
export declare function getSats(output: Output | UnblindedOutput): number;
export declare function getAsset(output: Output | UnblindedOutput): string;
export interface InputInterface {
    txid: string;
    vout: number;
    prevout?: Output | UnblindedOutput;
    isPegin: boolean;
}
export interface TxInterface {
    txid: string;
    fee: number;
    status: {
        confirmed: boolean;
        blockHeight?: number;
        blockHash?: string;
        blockTime?: number;
    };
    vin: InputInterface[];
    vout: (Output | UnblindedOutput)[];
}
export declare type CoinSelectorErrorFn = (asset: string, need: number, has: number) => void;
export declare type MultisigPayment = AddressInterface & {
    witnessScript: string;
};
export interface HDSignerMultisig {
    mnemonic: string;
    passphrase?: string;
    baseDerivationPath?: string;
}
export declare type XPub = string;
export declare type CosignerMultisig = XPub | HDSignerMultisig;
export declare type NetworkString = 'regtest' | 'testnet' | 'liquid';
