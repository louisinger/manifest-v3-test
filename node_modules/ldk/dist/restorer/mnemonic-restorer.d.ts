import { IdentityInterface } from '../identity/identity';
import { Multisig } from '../identity/multisig';
import { MultisigWatchOnly } from '../identity/multisigWatchOnly';
import { MasterPublicKey } from './../identity/masterpubkey';
import { Mnemonic } from './../identity/mnemonic';
import { Restorer } from './restorer';
export declare const BLOCKSTREAM_ESPLORA_ENDPOINT = "https://blockstream.info/liquid/api";
export interface EsploraRestorerOpts {
    esploraURL: string;
    gapLimit: number;
}
export declare function restorerFromEsplora<R extends IdentityInterface>(identity: R, getAddress: (isChange: boolean, index: number) => string): Restorer<EsploraRestorerOpts, R>;
/**
 * build an async esplora restorer for a specific mnemonic
 * @param mnemonicToRestore
 */
export declare function mnemonicRestorerFromEsplora(mnemonicToRestore: Mnemonic): Restorer<EsploraRestorerOpts, Mnemonic>;
/**
 * build an async esplora restorer for a specific masterPubKey
 * @param toRestore
 */
export declare function masterPubKeyRestorerFromEsplora(toRestore: MasterPublicKey): Restorer<EsploraRestorerOpts, MasterPublicKey>;
/**
 * build an async esplora restorer for a MultisigWatchOnly
 * @param toRestore
 */
export declare function multisigWatchOnlyFromEsplora(toRestore: MultisigWatchOnly): Restorer<EsploraRestorerOpts, MultisigWatchOnly>;
/**
 * build an async esplora restorer for a Multisig
 * @param toRestore
 */
export declare function multisigFromEsplora(toRestore: Multisig): Restorer<EsploraRestorerOpts, Multisig>;
export interface StateRestorerOpts {
    lastUsedExternalIndex?: number;
    lastUsedInternalIndex?: number;
}
export declare function restorerFromState<R extends IdentityInterface>(identity: R): Restorer<StateRestorerOpts, R>;
/**
 * create a restorer from state for a given mnemonic
 * @param toRestore
 */
export declare function mnemonicRestorerFromState(toRestore: Mnemonic): Restorer<StateRestorerOpts, Mnemonic>;
/**
 * create a restorer from state for a given mnemonic
 * @param toRestore
 */
export declare function masterPubKeyRestorerFromState(toRestore: MasterPublicKey): Restorer<StateRestorerOpts, MasterPublicKey>;
