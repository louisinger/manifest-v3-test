import { BlindingDataLike } from 'liquidjs-lib/src/psbt';
import { AddressInterface } from '../types';
import { Identity, IdentityInterface, IdentityOpts } from './identity';
/**
 * This interface describes the shape of the value arguments used in contructor.
 * @member signingKeyWIF a valid private key WIF encoded.
 * @member blindingKeyWIF a valid private key WIF encoded.
 */
export interface PrivateKeyOpts {
    signingKeyWIF: string;
    blindingKeyWIF: string;
}
/**
 * The PrivateKey Identity takes a WIF and modelize a user using his private key.
 * @member signingKeyPair private, the key pair used to sign inputs.
 * @member blindingKeyPair private, the key pair used to blind outputs.
 * @member confidentialAddress private, the confidential address generated from keypairs.
 * @member blindingPrivateKey private, the blinding private key associated with the confidential address.
 * @member scriptPubKey private, the scriptPubKey associated to the confidential address.
 * @method signPset sign all the inputs when it's possible (scriptPubKey = input's script).
 * @method getAddresses return an array of one element containing the blindingPrivateKey & the confidentialAddress.
 */
export declare class PrivateKey extends Identity implements IdentityInterface {
    private signingKeyPair;
    private blindingKeyPair;
    private confidentialAddress;
    private blindingPrivateKey;
    private scriptPubKey;
    constructor(args: IdentityOpts<PrivateKeyOpts>);
    blindPset(psetBase64: string, outputsToBlind: number[], outputsPubKeys?: Map<number, string>, inputsBlindingDataLike?: Map<number, BlindingDataLike>): Promise<string>;
    private getBlindingKeyPair;
    isAbleToSign(): boolean;
    private decodeFromWif;
    private getAddress;
    getNextAddress(): Promise<AddressInterface>;
    getNextChangeAddress(): Promise<AddressInterface>;
    getBlindingPrivateKey(script: string): Promise<string>;
    /**
     * iterate through inputs and sign when it's possible, then returns the signed pset (base64 encoded).
     * @param psetBase64 the base64 encoded pset.
     */
    signPset(psetBase64: string): Promise<string>;
    /**
     * for private key: only returns one confidential address & the associated blindingPrivKey.
     */
    getAddresses(): Promise<AddressInterface[]>;
}
