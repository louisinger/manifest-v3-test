import { BIP32Interface } from 'bip32';
import { BlindingDataLike } from 'liquidjs-lib/src/psbt';
import { Slip77Interface } from 'slip77';
import { AddressInterface, MultisigPayment, CosignerMultisig } from '../types';
import { IdentityInterface, IdentityOpts } from './identity';
import { Identity } from './identity';
export declare const DEFAULT_BASE_DERIVATION_PATH = "m/48'/0'/0'/2'";
/**
 * the public keys required to sign are defined by cosignersPublicKeys (xpub)
 * the required number of signature must be < length of cosigners xpubs
 */
export interface MultisigWatchOnlyOpts {
    cosigners: CosignerMultisig[];
    requiredSignatures: number;
}
export declare class MultisigWatchOnly extends Identity implements IdentityInterface {
    private nextIndex;
    private nextChangeIndex;
    static EXTERNAL_INDEX: number;
    static INTERNAL_INDEX: number;
    cosigners: BIP32Interface[];
    blindingKeyMasterNode: Slip77Interface;
    requiredSignatures: number;
    constructor(args: IdentityOpts<MultisigWatchOnlyOpts>);
    getNextAddress(): Promise<MultisigPayment>;
    getNextChangeAddress(): Promise<MultisigPayment>;
    getAddresses(): Promise<AddressInterface[]>;
    getBlindingPrivateKey(script: string): Promise<string>;
    private getBlindingKeyPair;
    isAbleToSign(): boolean;
    signPset(_: string): Promise<string>;
    blindPset(psetBase64: string, outputsIndexToBlind: number[], outputsPubKeysByIndex?: Map<number, string>, inputsBlindingDataLike?: Map<number, BlindingDataLike>): Promise<string>;
    getMultisigAddress(change: number, index: number): MultisigPayment;
}
