/// <reference types="node" />
import { TinySecp256k1Interface as ecpairTinySecp256k1Interface } from 'ecpair';
import { TinySecp256k1Interface as slip77TinySecp256k1Interface } from 'slip77';
import { TinySecp256k1Interface as bip32TinySecp256k1Interface } from 'bip32';
import { Network } from 'liquidjs-lib/src/networks';
import { BlindingDataLike } from 'liquidjs-lib/src/psbt';
import { AddressInterface, BlindingKeyGetterAsync, NetworkString } from '../types';
import { IdentityType } from '../types';
export declare type TinySecp256k1Interface = bip32TinySecp256k1Interface & slip77TinySecp256k1Interface & ecpairTinySecp256k1Interface;
/**
 * The identity interface.
 * @member network the network type (regtest, liquid...)
 * @member type the Identity type @see IdentityType
 * @method signPset take a base64 pset, sign it, and returns the result base64 encoded.
 * @method getAddresses returns all the generated addresses (and their blindkey if confidential).
 */
export interface IdentityInterface {
    network: Network;
    type: IdentityType;
    getNextAddress(constructorParams?: Record<string, string | number>): Promise<AddressInterface>;
    getNextChangeAddress(constructorParams?: Record<string, string | number>): Promise<AddressInterface>;
    signPset(psetBase64: string): Promise<string>;
    getAddresses(): Promise<AddressInterface[]>;
    getBlindingPrivateKey(script: string): Promise<string>;
    isAbleToSign(): boolean;
    blindPset(psetBase64: string, outputsIndexToBlind: number[], outputsPubKeysByIndex?: Map<number, string>, inputsBlindingDataLike?: Map<number, BlindingDataLike>): Promise<string>;
}
/**
 * Identity constructors options.
 * @member chain the blockchain type of the identity.
 * @member type the identity type @see IdentityType .
 * @member value the data used to create the Identity. depends of the type.
 */
export interface IdentityOpts<optsT> {
    chain: NetworkString;
    type: number;
    opts: optsT;
    ecclib: TinySecp256k1Interface;
}
/**
 * Abstract class for Identity.
 */
export declare class Identity {
    network: Network;
    type: IdentityType;
    ecclib: TinySecp256k1Interface;
    constructor(args: IdentityOpts<any>);
    blindPsetWithBlindKeysGetter(getBlindingKeyPair: (script: Buffer) => {
        publicKey: Buffer;
        privateKey: Buffer;
    }, psetBase64: string, outputsToBlind: number[], outputsPubKeys?: Map<number, string>, inputsBlindingDataLike?: Map<number, BlindingDataLike>): Promise<string>;
}
export declare function privateBlindKeyGetter(identity: IdentityInterface): BlindingKeyGetterAsync;
