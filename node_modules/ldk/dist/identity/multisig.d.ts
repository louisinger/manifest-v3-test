import { BIP32Interface } from 'bip32';
import { HDSignerMultisig } from '../types';
import { IdentityInterface, IdentityOpts } from './identity';
import { MultisigWatchOnly, MultisigWatchOnlyOpts } from './multisigWatchOnly';
export declare type MultisigOpts = {
    signer: HDSignerMultisig;
} & MultisigWatchOnlyOpts;
export declare class Multisig extends MultisigWatchOnly implements IdentityInterface {
    readonly baseDerivationPath: string;
    readonly baseNode: BIP32Interface;
    readonly scriptToPath: Record<string, string>;
    constructor(args: IdentityOpts<MultisigOpts>);
    getNextAddress(): Promise<import("../types").MultisigPayment>;
    getNextChangeAddress(): Promise<import("../types").MultisigPayment>;
    isAbleToSign(): boolean;
    signPset(psetBase64: string): Promise<string>;
    getXPub(): string;
    private toScript;
}
