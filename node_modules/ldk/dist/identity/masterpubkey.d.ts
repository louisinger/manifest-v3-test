/// <reference types="node" />
import { BIP32Interface } from 'bip32';
import { BlindingDataLike } from 'liquidjs-lib';
import { Slip77Interface } from 'slip77';
import { AddressInterface } from '../types';
import { Identity, IdentityInterface, IdentityOpts } from './identity';
export interface MasterPublicKeyOpts {
    masterPublicKey: string;
    masterBlindingKey: string;
    baseDerivationPath?: string;
}
interface AddressInterfaceExtended {
    address: AddressInterface;
    publicKey: string;
}
export declare class MasterPublicKey extends Identity implements IdentityInterface {
    protected static INITIAL_BASE_PATH: string;
    static INITIAL_INDEX: number;
    private index;
    private changeIndex;
    protected scriptToAddressCache: Record<string, AddressInterfaceExtended>;
    private baseDerivationPath;
    readonly masterPublicKeyNode: BIP32Interface;
    readonly masterBlindingKeyNode: Slip77Interface;
    constructor(args: IdentityOpts<MasterPublicKeyOpts>);
    blindPset(psetBase64: string, outputsToBlind: number[], outputsPubKeys?: Map<number, string>, inputsBlindingDataLike?: Map<number, BlindingDataLike>): Promise<string>;
    isAbleToSign(): boolean;
    /**
     * return the next public key derivated from the baseNode.
     * increment the private member index +1.
     */
    private derivePublicKeyWithIndex;
    /**
     * Derives the script given as parameter to a keypair (SLIP77).
     * @param scriptPubKey script to derive.
     */
    protected getBlindingKeyPair(scriptPubKey: string, checkScript?: boolean): {
        publicKey: Buffer;
        privateKey: Buffer;
    };
    private scriptFromPublicKey;
    private createConfidentialAddress;
    persistAddressToCache(address: AddressInterfaceExtended): void;
    getAddress(isChange: boolean, index: number): AddressInterfaceExtended;
    getNextAddress(): Promise<AddressInterface>;
    getNextChangeAddress(): Promise<AddressInterface>;
    getBlindingPrivateKey(script: string): Promise<string>;
    signPset(_: string): Promise<string>;
    getAddresses(): Promise<AddressInterface[]>;
    getXPub(): string;
}
export {};
