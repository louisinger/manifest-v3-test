import { BlindingDataLike } from 'liquidjs-lib/src/psbt';
import { AddressInterface } from '../types';
import { Identity, IdentityInterface, IdentityOpts } from './identity';
/**
 * This interface describes the shape of the value arguments used in contructor.
 * @member windowProvider a valid property of the browser's window object where to lookup the injected provider
 */
export interface InjectOpts {
    windowProvider: string;
}
export interface BrowserInjectProviderInterface {
    getNextAddress: () => Promise<AddressInterface>;
    getNextChangeAddress: () => Promise<AddressInterface>;
    getAddresses: () => Promise<AddressInterface[]>;
    signTransaction: (psetBase64: string) => Promise<string>;
}
export declare class BrowserInject extends Identity implements IdentityInterface {
    protected provider: BrowserInjectProviderInterface;
    constructor(args: IdentityOpts<InjectOpts>);
    getNextAddress(): Promise<AddressInterface>;
    getNextChangeAddress(): Promise<AddressInterface>;
    signPset(psetBase64: string): Promise<string>;
    getAddresses(): Promise<AddressInterface[]>;
    getBlindingPrivateKey(_: string): Promise<string>;
    isAbleToSign(): boolean;
    blindPset(_: string, __: number[], ___?: Map<number, string>, ____?: Map<number, BlindingDataLike>): Promise<string>;
}
