import { CoinSelector } from './coinselection/coinSelector';
import { ChangeAddressFromAssetGetter, RecipientInterface, UnblindedOutput, Output, CoinSelectorErrorFn } from './types';
export declare function craftSingleRecipientPset(unspents: UnblindedOutput[], recipient: RecipientInterface, coinSelector: CoinSelector, changeAddressByAsset: ChangeAddressFromAssetGetter, substractFeeFromRecipient?: boolean, satsPerByte?: number): string;
export interface BuildTxArgs {
    psetBase64: string;
    unspents: UnblindedOutput[];
    recipients: RecipientInterface[];
    coinSelector: CoinSelector;
    changeAddressByAsset: ChangeAddressFromAssetGetter;
    addFee?: boolean;
    satsPerByte?: number;
    errorHandler?: CoinSelectorErrorFn;
}
export declare const DEFAULT_SATS_PER_BYTE = 0.1;
/**
 * buildTx selects utxos among unspents to fill outputs' requirements,
 * then it adds the associated inputs and outputs to the tx.
 * finally it returns the new pset base64 encoded.
 * @param args buildTxArgs wraps arguments
 */
export declare function craftMultipleRecipientsPset(args: BuildTxArgs): string;
export declare function createFeeOutput(numInputs: number, numOutputs: number, satsPerByte: number, assetHash: string): RecipientInterface;
export declare function addToTx(psetBase64: string, unspents: Output[], recipients: RecipientInterface[]): string;
export declare function estimateTxSize(numInputs: number, numOutputs: number): number;
