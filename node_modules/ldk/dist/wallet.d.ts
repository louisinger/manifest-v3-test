import { CoinSelector } from './coinselection/coinSelector';
import { AddressInterface, RecipientInterface, ChangeAddressFromAssetGetter, NetworkString, UnblindedOutput } from './types';
import { Network } from 'liquidjs-lib/src/networks';
import { TinySecp256k1Interface } from 'ecpair';
/**
 * Wallet abstraction.
 */
export interface WalletInterface {
    network: Network;
    createTx(): string;
    buildTx(psetBase64: string, recipients: RecipientInterface[], coinSelector: CoinSelector, changeAddressByAsset: ChangeAddressFromAssetGetter, addFee?: boolean, satsPerByte?: number): string;
    sendTx(recipient: RecipientInterface, coinSelector: CoinSelector, changeAddressByAsset: ChangeAddressFromAssetGetter, substractFee?: boolean, satsPerByte?: number): string;
}
/**
 * Implementation of Wallet Interface.
 * @member network type of network (regtest...)
 * @member addresses list of AddressInterface.
 * @method createTx init empty PSET.
 * @method updateTx update a PSET with outputs and inputs (for Swap tx).
 */
export declare class Wallet implements WalletInterface {
    network: Network;
    unspents: UnblindedOutput[];
    constructor(unspents: UnblindedOutput[], network: Network);
    /**
     * Returns an empty liquidjs lib Psbt instance.
     */
    createTx(): string;
    buildTx(psetBase64: string, recipients: RecipientInterface[], coinSelector: CoinSelector, changeAddressByAsset: ChangeAddressFromAssetGetter, addFee?: boolean, satsPerByte?: number): string;
    sendTx(recipient: RecipientInterface, coinSelector: CoinSelector, changeAddressByAsset: ChangeAddressFromAssetGetter, substractFee?: boolean, satsPerByte?: number): string;
}
/**
 * Factory: list of addresses --to--> Wallet
 * @param addresses a list of addressInterface.
 * @param explorerUrl the esplora endpoint used to fetch addresses's utxos
 * @param network network type
 */
export declare function walletFromAddresses(ecclib: TinySecp256k1Interface, addresses: AddressInterface[], explorerUrl: string, network?: NetworkString): Promise<WalletInterface>;
export declare function walletFromCoins(coins: UnblindedOutput[], network?: NetworkString): WalletInterface;
