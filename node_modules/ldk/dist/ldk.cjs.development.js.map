{"version":3,"file":"ldk.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/utils.ts","../src/types.ts","../src/identity/identity.ts","../src/identity/masterpubkey.ts","../src/identity/mnemonic.ts","../src/identity/privatekey.ts","../src/identity/browserinject.ts","../src/p2ms.ts","../src/identity/multisigWatchOnly.ts","../src/identity/multisig.ts","../src/coinselection/utils.ts","../src/coinselection/greedy.ts","../src/explorer/esplora.ts","../src/error/unblind-error.ts","../src/explorer/transaction.ts","../src/explorer/utxos.ts","../src/explorer/chainsync.ts","../src/explorer/api.ts","../src/transaction.ts","../src/wallet.ts","../src/balance.ts","../src/blinding.ts","../src/restorer/mnemonic-restorer.ts","../src/restorer/chainsync.ts","../src/script-analyser.ts","../src/descriptors/ast.ts","../src/descriptors/utils.ts","../src/descriptors/parser.ts","../src/descriptors/preprocessing.ts","../src/descriptors/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { setDefaultWordlist, validateMnemonic } from 'bip39';\nimport b58 from 'bs58check';\nimport {\n  Psbt,\n  Transaction,\n  confidential,\n  networks,\n  address,\n} from 'liquidjs-lib';\nimport { Network } from 'liquidjs-lib/src/networks';\nimport {\n  AddressInterface,\n  Outpoint,\n  Output,\n  IdentityType,\n  NetworkString,\n  UnblindedOutput,\n} from './types';\n\nconst ZERO = Buffer.alloc(32);\n\nexport function toAssetHash(x: Buffer): string {\n  const withoutFirstByte = x.slice(1);\n  return (withoutFirstByte.reverse() as Buffer).toString('hex');\n}\n\nexport function fromAssetHash(x: string): Buffer {\n  return Buffer.concat([\n    Buffer.from('01', 'hex'), //prefix for unconfidential asset\n    Buffer.from(x, 'hex').reverse(),\n  ]);\n}\n\nexport function toNumber(x: Buffer): number {\n  return confidential.confidentialValueToSatoshi(x);\n}\n\nexport function isValidAmount(amount: number): boolean {\n  if (amount <= 0 || !Number.isSafeInteger(amount)) return false;\n  return true;\n}\n\n/**\n * The unblind output function's result interface.\n */\nexport interface UnblindResult {\n  asset: Buffer;\n  // in satoshis\n  value: number;\n}\n\nconst emptyNonce: Buffer = Buffer.from('0x00', 'hex');\n\nfunction bufferNotEmptyOrNull(buffer?: Buffer): boolean {\n  return buffer != null && buffer.length > 0;\n}\n\n/**\n * Checks if a given output is a confidential one.\n * @param output the ouput to check.\n */\nexport function isConfidentialOutput({\n  rangeProof,\n  surjectionProof,\n  nonce,\n}: any): boolean {\n  return (\n    bufferNotEmptyOrNull(rangeProof) &&\n    bufferNotEmptyOrNull(surjectionProof) &&\n    nonce !== emptyNonce\n  );\n}\n\nexport class BufferMap<T> {\n  private map: Map<string, T>;\n\n  constructor() {\n    this.map = new Map<string, T>();\n  }\n\n  private bufferToStringPrimitive(buffer: Buffer): string {\n    return buffer.toString('hex').valueOf();\n  }\n\n  get(key: Buffer): T | undefined {\n    return this.map.get(this.bufferToStringPrimitive(key));\n  }\n\n  set(key: Buffer, value: T): this {\n    this.map.set(this.bufferToStringPrimitive(key), value);\n    return this;\n  }\n\n  values(): T[] {\n    return Array.from(this.map.values());\n  }\n}\n\n// This has been taken from https://github.com/Casa/xpub-converter/blob/master/js/xpubConvert.js\n/*\n  This script uses version bytes as described in SLIP-132\n  https://github.com/satoshilabs/slips/blob/master/slip-0132.md\n*/\nconst prefixes = new Map([\n  ['xpub', '0488b21e'],\n  ['ypub', '049d7cb2'],\n  ['Ypub', '0295b43f'],\n  ['zpub', '04b24746'],\n  ['Zpub', '02aa7ed3'],\n  ['tpub', '043587cf'],\n  ['upub', '044a5262'],\n  ['Upub', '024289ef'],\n  ['vpub', '045f1cf6'],\n  ['Vpub', '02575483'],\n]);\n\n/*\n * This function takes an extended public key (with any version bytes, it doesn't need to be an xpub)\n * and converts it to an extended public key formatted with the desired version bytes\n * @param xpub: an extended public key in base58 format. Example: xpub6CpihtY9HVc1jNJWCiXnRbpXm5BgVNKqZMsM4XqpDcQigJr6AHNwaForLZ3kkisDcRoaXSUms6DJNhxFtQGeZfWAQWCZQe1esNetx5Wqe4M\n * @param targetFormat: a string representing the desired prefix; must exist in the \"prefixes\" mapping defined above. Example: Zpub\n */\nfunction changeVersionBytes(xpub: string, targetFormat: string) {\n  if (!prefixes.has(targetFormat)) {\n    return 'Invalid target version';\n  }\n\n  // trim whitespace\n  xpub = xpub.trim();\n\n  try {\n    let data = b58.decode(xpub);\n    data = data.slice(4);\n    data = Buffer.concat([\n      Buffer.from(prefixes.get(targetFormat)!, 'hex'),\n      data,\n    ]);\n    return b58.encode(data);\n  } catch (err) {\n    throw new Error(\n      \"Invalid extended public key! Please double check that you didn't accidentally paste extra data.\"\n    );\n  }\n}\n\nexport function fromXpub(xub: string, chain: NetworkString) {\n  const format = chain === 'liquid' ? 'zpub' : 'vpub';\n  return changeVersionBytes(xub, format);\n}\n\nexport function toXpub(anyPub: string) {\n  return changeVersionBytes(anyPub, 'xpub');\n}\n\nconst extendedPubKeyRegexp = /[a-z]pub[a-km-zA-HJ-NP-Z1-9]{100,108}$/;\nconst masterBlindKeyRegexp = /[0-9a-fA-F]{64}$/;\n\nexport function isValidXpub(xpub: string): boolean {\n  return extendedPubKeyRegexp.test(xpub);\n}\n\nexport function isValidExtendedBlindKey(masterBlind: string): boolean {\n  return masterBlindKeyRegexp.test(masterBlind);\n}\n\nexport function psetToUnsignedHex(psetBase64: string): string {\n  let pset: Psbt;\n  try {\n    pset = Psbt.fromBase64(psetBase64);\n  } catch (ignore) {\n    throw new Error('Invalid pset');\n  }\n\n  return pset.data.globalMap.unsignedTx.toBuffer().toString('hex');\n}\n\nexport function psetToUnsignedTx(ptx: string): Transaction {\n  return Transaction.fromHex(psetToUnsignedHex(ptx));\n}\n\nexport function toOutpoint({ txid, vout }: Output): Outpoint {\n  return { txid, vout };\n}\n\nexport function getNetwork(str?: NetworkString): Network {\n  return str ? (networks as Record<string, Network>)[str] : networks.liquid;\n}\n\n/**\n * Compute the blinding data for a given output\n * @param utxo blinded utxo\n * @param blindPrivKey blinding private key\n */\nexport async function unblindOutput(\n  utxo: Output,\n  blindPrivKey: string\n): Promise<UnblindedOutput> {\n  if (!isConfidentialOutput(utxo.prevout)) {\n    return {\n      ...utxo,\n      unblindData: {\n        asset: utxo.prevout.asset.slice(1),\n        value: confidential\n          .confidentialValueToSatoshi(utxo.prevout.value)\n          .toString(10),\n        assetBlindingFactor: ZERO,\n        valueBlindingFactor: ZERO,\n      },\n    };\n  }\n\n  const unblindData = await confidential.unblindOutputWithKey(\n    utxo.prevout,\n    Buffer.from(blindPrivKey, 'hex')\n  );\n\n  return {\n    ...utxo,\n    unblindData,\n  };\n}\n\n// util function that parse a derivation path and return the index\nexport function getIndexFromAddress(addr: AddressInterface) {\n  if (!addr.derivationPath) {\n    throw new Error('need derivation path to be defined');\n  }\n\n  const derivationPathSplitted = addr.derivationPath.split('/');\n\n  return parseInt(derivationPathSplitted[derivationPathSplitted.length - 1]);\n}\n\n// throws an error if actual is not expect\nexport function checkIdentityType(actual: IdentityType, expect: IdentityType) {\n  if (actual !== expect)\n    throw new Error(\n      `Incorrect Identity type: need ${expect} and get ${actual}.`\n    );\n}\n\nexport function checkMnemonic(mnemonic: string, language?: string) {\n  if (language) setDefaultWordlist(language);\n  if (!validateMnemonic(mnemonic)) throw new Error('Mnemonic is not valid.');\n}\n\nexport function decodePset(psetBase64: string): Psbt {\n  let pset: Psbt;\n  try {\n    pset = Psbt.fromBase64(psetBase64);\n  } catch (ignore) {\n    throw new Error('Invalid pset');\n  }\n  return pset;\n}\n\nexport function getScripts(addresses: AddressInterface[]): Set<string> {\n  return new Set(\n    addresses.map(a =>\n      address.toOutputScript(a.confidentialAddress).toString('hex')\n    )\n  );\n}\n\nexport function groupBy<T extends Record<string, any>>(\n  xs: T[],\n  key: (t: T) => string\n): Record<string, T[]> {\n  return xs.reduce(function(rv, x) {\n    const k = key(x);\n    const row = rv[k] ?? [];\n    rv[k] = [...row, x];\n    return rv;\n  }, {} as Record<string, T[]>);\n}\n","import { TxOutput, confidential } from 'liquidjs-lib';\nimport { isConfidentialOutput } from './utils';\n\n/**\n * Enumeration of all the Identity types.\n */\nexport enum IdentityType {\n  PrivateKey = 1,\n  Mnemonic,\n  MasterPublicKey,\n  Inject,\n  Ledger,\n  Trezor,\n  MultisigWatchOnly,\n  Multisig,\n}\n\n/**\n * Defines the shape of the object returned by the getAdresses's method.\n * @member confidentialAddress the confidential address.\n * @member blindingPrivateKey the blinding private key associated to the confidential address.\n */\nexport interface AddressInterface {\n  confidentialAddress: string;\n  blindingPrivateKey: string;\n  derivationPath?: string;\n  publicKey?: string;\n  [key: string]: any;\n}\n\n// define a type using to implement change's address strategy\nexport type ChangeAddressFromAssetGetter = (asset: string) => string;\n\n// define function that takes a script as input and returns a blinding key (or undefined)\nexport type BlindingKeyGetter = (script: string) => string | undefined;\nexport type BlindingKeyGetterAsync = (\n  script: string\n) => Promise<string | undefined>;\n\nexport interface RecipientInterface {\n  value: number;\n  asset: string;\n  address: string;\n}\n\nexport interface Outpoint {\n  txid: string;\n  vout: number;\n}\n\nexport type Output = Outpoint & {\n  prevout: TxOutput;\n};\n\nexport type UnblindedOutput = Output & {\n  unblindData: confidential.UnblindOutputResult;\n};\n\nexport function isUnblindedOutput(output: Output): output is UnblindedOutput {\n  return (output as UnblindedOutput).unblindData !== undefined;\n}\n\nexport function getSats(output: Output | UnblindedOutput): number {\n  if (isUnblindedOutput(output)) return parseInt(output.unblindData.value, 10);\n  if (!isConfidentialOutput(output.prevout)) {\n    return confidential.confidentialValueToSatoshi(output.prevout.value);\n  }\n\n  throw new Error(\n    'cannot get value for confidential output, need unblinded one'\n  );\n}\n\nexport function getAsset(output: Output | UnblindedOutput): string {\n  if (isUnblindedOutput(output)) {\n    const asset = Buffer.from(output.unblindData.asset).reverse();\n    return asset.toString('hex');\n  }\n\n  if (!isConfidentialOutput(output.prevout)) {\n    const asset = Buffer.from(output.prevout.asset)\n      .slice(1)\n      .reverse();\n    return asset.toString('hex');\n  }\n\n  throw new Error(\n    'cannot get asset for confidential output, need unblinded one'\n  );\n}\n\nexport interface InputInterface {\n  txid: string;\n  vout: number;\n  prevout?: Output | UnblindedOutput;\n  isPegin: boolean;\n}\n\nexport interface TxInterface {\n  txid: string;\n  fee: number;\n  status: {\n    confirmed: boolean;\n    blockHeight?: number;\n    blockHash?: string;\n    blockTime?: number;\n  };\n  vin: InputInterface[];\n  vout: (Output | UnblindedOutput)[];\n}\n\nexport type CoinSelectorErrorFn = (\n  asset: string,\n  need: number,\n  has: number\n) => void;\n\nexport type MultisigPayment = AddressInterface & {\n  witnessScript: string;\n};\n\nexport interface HDSignerMultisig {\n  mnemonic: string;\n  passphrase?: string;\n  baseDerivationPath?: string;\n}\n\nexport type XPub = string;\n\nexport type CosignerMultisig = XPub | HDSignerMultisig; // xpub or signer\n\nexport type NetworkString = 'regtest' | 'testnet' | 'liquid';\n","import { TinySecp256k1Interface as ecpairTinySecp256k1Interface } from 'ecpair';\nimport { TinySecp256k1Interface as slip77TinySecp256k1Interface } from 'slip77';\nimport { TinySecp256k1Interface as bip32TinySecp256k1Interface } from 'bip32';\nimport { Transaction, networks, confidential, TxOutput } from 'liquidjs-lib';\nimport { Network } from 'liquidjs-lib/src/networks';\nimport { BlindingDataLike, Psbt } from 'liquidjs-lib/src/psbt';\nimport {\n  AddressInterface,\n  BlindingKeyGetterAsync,\n  NetworkString,\n} from '../types';\nimport { IdentityType } from '../types';\nimport { isConfidentialOutput, psetToUnsignedHex, decodePset } from '../utils';\n\nexport type TinySecp256k1Interface = bip32TinySecp256k1Interface &\n  slip77TinySecp256k1Interface &\n  ecpairTinySecp256k1Interface;\n\n/**\n * The identity interface.\n * @member network the network type (regtest, liquid...)\n * @member type the Identity type @see IdentityType\n * @method signPset take a base64 pset, sign it, and returns the result base64 encoded.\n * @method getAddresses returns all the generated addresses (and their blindkey if confidential).\n */\nexport interface IdentityInterface {\n  network: Network;\n  type: IdentityType;\n  getNextAddress(\n    constructorParams?: Record<string, string | number>\n  ): Promise<AddressInterface>;\n  getNextChangeAddress(\n    constructorParams?: Record<string, string | number>\n  ): Promise<AddressInterface>;\n  signPset(psetBase64: string): Promise<string>;\n  getAddresses(): Promise<AddressInterface[]>;\n  getBlindingPrivateKey(script: string): Promise<string>;\n  isAbleToSign(): boolean;\n  blindPset(\n    // the pset to blind\n    psetBase64: string,\n    // the output to blind, specifided by output index\n    outputsIndexToBlind: number[],\n    // optional: an outputs index to hex encoded blinding pub key\n    // only useful for non-wallet outputs\n    outputsPubKeysByIndex?: Map<number, string>,\n    // BlindingDataLike to use to blind the outputs by input index\n    inputsBlindingDataLike?: Map<number, BlindingDataLike>\n  ): Promise<string>;\n}\n\n/**\n * Identity constructors options.\n * @member chain the blockchain type of the identity.\n * @member type the identity type @see IdentityType .\n * @member value the data used to create the Identity. depends of the type.\n */\nexport interface IdentityOpts<optsT> {\n  chain: NetworkString;\n  type: number;\n  opts: optsT;\n  ecclib: TinySecp256k1Interface;\n}\n\n/**\n * Abstract class for Identity.\n */\nexport class Identity {\n  network: Network;\n  type: IdentityType;\n  ecclib: TinySecp256k1Interface;\n\n  constructor(args: IdentityOpts<any>) {\n    if (!args.chain || !networks.hasOwnProperty(args.chain)) {\n      throw new Error('Network is missing or not valid');\n    }\n\n    if (!args.type || !(args.type in IdentityType)) {\n      throw new Error('Type is missing or not valid');\n    }\n\n    this.network = (networks as Record<string, Network>)[args.chain];\n    this.type = args.type;\n    this.ecclib = args.ecclib;\n  }\n\n  async blindPsetWithBlindKeysGetter(\n    getBlindingKeyPair: (\n      script: Buffer\n    ) => { publicKey: Buffer; privateKey: Buffer },\n    psetBase64: string,\n    outputsToBlind: number[],\n    outputsPubKeys?: Map<number, string>,\n    inputsBlindingDataLike?: Map<number, BlindingDataLike>\n  ): Promise<string> {\n    const inputsData = new Map<number, BlindingDataLike>();\n    const outputsKeys = new Map<number, Buffer>();\n\n    const pset = decodePset(psetBase64);\n    const transaction = Transaction.fromHex(psetToUnsignedHex(psetBase64));\n\n    // set the outputs map\n    for (const index of outputsToBlind) {\n      if (outputsPubKeys?.has(index)) {\n        const pubKey = Buffer.from(outputsPubKeys.get(index)!, 'hex');\n        outputsKeys.set(index, pubKey);\n        continue;\n      }\n\n      const { script } = transaction.outs[index];\n      const pubKey = getBlindingKeyPair(script).publicKey;\n      outputsKeys.set(index, pubKey);\n    }\n\n    // set the inputs map\n    for (let index = 0; index < pset.data.inputs.length; index++) {\n      const input = pset.data.inputs[index];\n      let script: Buffer | undefined = undefined;\n\n      // continue if the input witness is unconfidential\n      if (input.witnessUtxo) {\n        if (!isConfidentialOutput(input.witnessUtxo)) {\n          continue;\n        }\n\n        script = input.witnessUtxo.script;\n      }\n\n      if (input.nonWitnessUtxo) {\n        const vout = transaction.ins[index].index;\n        const witness = Transaction.fromBuffer(input.nonWitnessUtxo).outs[vout];\n        if (!isConfidentialOutput(witness)) {\n          continue;\n        }\n\n        script = witness.script;\n      }\n\n      // check if blindingDataLike is specified\n      if (inputsBlindingDataLike?.has(index)) {\n        inputsData.set(index, inputsBlindingDataLike.get(index));\n        continue;\n      }\n\n      if (!script) {\n        throw new Error('no witness script for input #' + index);\n      }\n\n      // else, get the private blinding key and use it as blindingDataLike\n      const privKey = getBlindingKeyPair(script).privateKey;\n      const blinders = await confidential.unblindOutputWithKey(\n        input.witnessUtxo as TxOutput,\n        privKey\n      );\n\n      inputsData.set(index, blinders);\n    }\n\n    const blinded = await pset.blindOutputsByIndex(\n      Psbt.ECCKeysGenerator(this.ecclib),\n      inputsData,\n      outputsKeys\n    );\n\n    return blinded.toBase64();\n  }\n}\n\nexport function privateBlindKeyGetter(\n  identity: IdentityInterface\n): BlindingKeyGetterAsync {\n  return async (script: string) => {\n    return identity.getBlindingPrivateKey(script);\n  };\n}\n","import BIP32Factory, { BIP32Interface } from 'bip32';\nimport { BlindingDataLike, payments } from 'liquidjs-lib';\nimport { SLIP77Factory, Slip77Interface } from 'slip77';\nimport { AddressInterface, IdentityType } from '../types';\nimport {\n  checkIdentityType,\n  isValidExtendedBlindKey,\n  isValidXpub,\n} from '../utils';\nimport { Identity, IdentityInterface, IdentityOpts } from './identity';\n\nexport interface MasterPublicKeyOpts {\n  masterPublicKey: string;\n  masterBlindingKey: string;\n  baseDerivationPath?: string;\n}\n\ninterface AddressInterfaceExtended {\n  address: AddressInterface;\n  publicKey: string;\n}\n\nexport class MasterPublicKey extends Identity implements IdentityInterface {\n  protected static INITIAL_BASE_PATH = \"m/84'/0'/0'\";\n  static INITIAL_INDEX = 0;\n\n  private index: number = MasterPublicKey.INITIAL_INDEX;\n  private changeIndex: number = MasterPublicKey.INITIAL_INDEX;\n  protected scriptToAddressCache: Record<string, AddressInterfaceExtended> = {};\n  private baseDerivationPath: string;\n\n  readonly masterPublicKeyNode: BIP32Interface;\n  readonly masterBlindingKeyNode: Slip77Interface;\n\n  constructor(args: IdentityOpts<MasterPublicKeyOpts>) {\n    super(args);\n\n    // check the identity type\n    checkIdentityType(args.type, IdentityType.MasterPublicKey);\n\n    // validate xpub\n    if (!isValidXpub(args.opts.masterPublicKey)) {\n      throw new Error('Master public key is not valid');\n    }\n    // validate master blinding key\n    if (!isValidExtendedBlindKey(args.opts.masterBlindingKey)) {\n      throw new Error('Master blinding key is not valid');\n    }\n\n    this.masterPublicKeyNode = BIP32Factory(args.ecclib).fromBase58(\n      args.opts.masterPublicKey\n    );\n    this.masterBlindingKeyNode = SLIP77Factory(\n      args.ecclib\n    ).fromMasterBlindingKey(args.opts.masterBlindingKey);\n    this.baseDerivationPath =\n      args.opts.baseDerivationPath || MasterPublicKey.INITIAL_BASE_PATH;\n  }\n\n  async blindPset(\n    psetBase64: string,\n    outputsToBlind: number[],\n    outputsPubKeys?: Map<number, string>,\n    inputsBlindingDataLike?: Map<number, BlindingDataLike>\n  ): Promise<string> {\n    return super.blindPsetWithBlindKeysGetter(\n      (script: Buffer) => this.getBlindingKeyPair(script.toString('hex'), true),\n      psetBase64,\n      outputsToBlind,\n      outputsPubKeys,\n      inputsBlindingDataLike\n    );\n  }\n\n  isAbleToSign(): boolean {\n    return false;\n  }\n\n  /**\n   * return the next public key derivated from the baseNode.\n   * increment the private member index +1.\n   */\n  private derivePublicKeyWithIndex(isChange: boolean, index: number): Buffer {\n    const changeIndex = isChange ? 1 : 0;\n    const baseNode = this.masterPublicKeyNode.derive(changeIndex);\n    const child: BIP32Interface = baseNode.derive(index);\n    return child.publicKey;\n  }\n\n  /**\n   * Derives the script given as parameter to a keypair (SLIP77).\n   * @param scriptPubKey script to derive.\n   */\n  protected getBlindingKeyPair(\n    scriptPubKey: string,\n    checkScript = false\n  ): { publicKey: Buffer; privateKey: Buffer } {\n    if (checkScript) {\n      const addressInterface = this.scriptToAddressCache[scriptPubKey];\n      if (!addressInterface) {\n        throw new Error(`unknow blinding key for script ${scriptPubKey}`);\n      }\n    }\n\n    const { publicKey, privateKey } = this.masterBlindingKeyNode.derive(\n      scriptPubKey\n    );\n    return { publicKey: publicKey!, privateKey: privateKey! };\n  }\n\n  private scriptFromPublicKey(publicKey: Buffer): string {\n    return payments\n      .p2wpkh({\n        pubkey: publicKey,\n        network: this.network,\n      })\n      .output!.toString('hex');\n  }\n\n  private createConfidentialAddress(\n    signingPublicKey: Buffer,\n    blindingPublicKey: Buffer\n  ): string {\n    return payments.p2wpkh({\n      pubkey: signingPublicKey,\n      blindkey: blindingPublicKey,\n      network: this.network,\n    }).confidentialAddress!;\n  }\n\n  // store the generation inside local cache\n  persistAddressToCache(address: AddressInterfaceExtended): void {\n    const publicKeyBuffer = Buffer.from(address.publicKey, 'hex');\n    const script = this.scriptFromPublicKey(publicKeyBuffer);\n\n    this.scriptToAddressCache[script] = address;\n  }\n\n  getAddress(isChange: boolean, index: number): AddressInterfaceExtended {\n    // get the next key pair\n    const publicKey = this.derivePublicKeyWithIndex(isChange, index);\n    // use the public key to compute the scriptPubKey\n    const script = this.scriptFromPublicKey(publicKey);\n    // generate the blindKeyPair from the scriptPubKey\n    const blindingKeyPair = this.getBlindingKeyPair(script);\n    // with blindingPublicKey & signingPublicKey, generate the confidential address\n    const confidentialAddress = this.createConfidentialAddress(\n      publicKey,\n      blindingKeyPair.publicKey\n    );\n    // create the address generation object\n    const path = `${this.baseDerivationPath}/${isChange ? 1 : 0}/${index}`;\n    const newAddressGeneration: AddressInterfaceExtended = {\n      address: {\n        confidentialAddress: confidentialAddress!,\n        blindingPrivateKey: blindingKeyPair.privateKey!.toString('hex'),\n        derivationPath: path,\n        publicKey: publicKey.toString('hex'),\n      },\n      publicKey: publicKey.toString('hex'),\n    };\n    // return the generation data\n    return newAddressGeneration;\n  }\n\n  async getNextAddress(): Promise<AddressInterface> {\n    const addr = this.getAddress(false, this.index);\n    this.persistAddressToCache(addr);\n    this.index = this.index + 1;\n    return addr.address;\n  }\n\n  async getNextChangeAddress(): Promise<AddressInterface> {\n    const addr = this.getAddress(true, this.changeIndex);\n    this.persistAddressToCache(addr);\n    this.changeIndex = this.changeIndex + 1;\n    return addr.address;\n  }\n\n  async getBlindingPrivateKey(script: string): Promise<string> {\n    return this.getBlindingKeyPair(script).privateKey.toString('hex');\n  }\n\n  signPset(_: string): Promise<string> {\n    throw new Error(\n      'MasterPublicKey is a watch only identity. Use Mnemonic to sign transactions'\n    );\n  }\n\n  // returns all the addresses generated\n  async getAddresses(): Promise<AddressInterface[]> {\n    return Object.values(this.scriptToAddressCache).map(\n      addrExtended => addrExtended.address\n    );\n  }\n\n  getXPub(): string {\n    return this.masterPublicKeyNode.toBase58();\n  }\n}\n","import BIP32Factory, { BIP32Interface } from 'bip32';\nimport * as bip39 from 'bip39';\nimport { Psbt, networks } from 'liquidjs-lib';\nimport { Network } from 'liquidjs-lib/src/networks';\nimport { BlindingDataLike } from 'liquidjs-lib/src/psbt';\nimport { SLIP77Factory, Slip77Interface } from 'slip77';\n\nimport { IdentityType } from '../types';\nimport { checkIdentityType, checkMnemonic, toXpub } from '../utils';\n\nimport { IdentityInterface, IdentityOpts } from './identity';\nimport { MasterPublicKey } from './masterpubkey';\nimport ECPairFactory from 'ecpair';\n\nexport interface MnemonicOpts {\n  mnemonic: string;\n  passphrase?: string;\n  language?: string;\n  baseDerivationPath?: string;\n}\n\n/**\n * @class Mnemonic\n * Get a mnemonic as parameter to set up an HD Wallet.\n * @member masterPrivateKeyNode a BIP32 node computed from the seed, used to generate signing key pairs.\n * @member masterBlindingKeyNode a SLIP77 node computed from the seed, used to generate the blinding key pairs.\n * @member derivationPath the base derivation path.\n * @member index the next index used to derive the base node (for signing key pairs).\n * @member scriptToAddressCache a map scriptPubKey --> address generation.\n */\nexport class Mnemonic extends MasterPublicKey implements IdentityInterface {\n  readonly mnemonic: string;\n  readonly masterPrivateKeyNode: BIP32Interface;\n  readonly masterBlindingKeyNode: Slip77Interface;\n\n  public masterPublicKey: string;\n  public masterBlindingKey: string;\n\n  constructor(args: IdentityOpts<MnemonicOpts>) {\n    checkIdentityType(args.type, IdentityType.Mnemonic);\n    // check set the language if it is different of the default language.\n    // the \"language exists check\" is delegated to `bip39.setDefaultWordlist` function.\n    bip39.setDefaultWordlist(args.opts.language || 'english');\n    checkMnemonic(args.opts.mnemonic);\n\n    // retreive the wallet's seed from mnemonic\n    const walletSeed = bip39.mnemonicToSeedSync(\n      args.opts.mnemonic,\n      args.opts.passphrase\n    );\n    // generate the master private key from the wallet seed\n    const network = (networks as Record<string, Network>)[args.chain];\n    const bip32 = BIP32Factory(args.ecclib);\n    const masterPrivateKeyNode = bip32.fromSeed(walletSeed, network);\n\n    // compute and expose the masterPublicKey in this.masterPublicKey\n    const masterPublicKey = toXpub(\n      masterPrivateKeyNode\n        .derivePath(\n          args.opts.baseDerivationPath || MasterPublicKey.INITIAL_BASE_PATH\n        )\n        .neutered()\n        .toBase58()\n    );\n\n    // generate the master blinding key from the seed\n    const masterBlindingKeyNode = SLIP77Factory(args.ecclib).fromSeed(\n      walletSeed\n    );\n    const masterBlindingKey = masterBlindingKeyNode.masterKey.toString('hex');\n\n    super({\n      ...args,\n      type: IdentityType.MasterPublicKey,\n      opts: {\n        masterPublicKey,\n        masterBlindingKey,\n        baseDerivationPath: args.opts.baseDerivationPath,\n      },\n    });\n\n    this.masterBlindingKey = masterBlindingKey;\n    this.masterBlindingKeyNode = masterBlindingKeyNode;\n    this.masterPublicKey = masterPublicKey;\n    this.masterPrivateKeyNode = masterPrivateKeyNode;\n    this.mnemonic = args.opts.mnemonic;\n  }\n\n  async blindPset(\n    psetBase64: string,\n    outputsToBlind: number[],\n    outputsPubKeys?: Map<number, string>,\n    inputsBlindingDataLike?: Map<number, BlindingDataLike>\n  ): Promise<string> {\n    return super.blindPsetWithBlindKeysGetter(\n      (script: Buffer) =>\n        super.getBlindingKeyPair(script.toString('hex'), true),\n      psetBase64,\n      outputsToBlind,\n      outputsPubKeys,\n      inputsBlindingDataLike\n    );\n  }\n\n  isAbleToSign(): boolean {\n    return true;\n  }\n\n  /**\n   * return the next keypair derivated from the baseNode.\n   * increment the private member index +1.\n   */\n  private derivePath(\n    derivationPath: string\n  ): { publicKey: Buffer; privateKey: Buffer } {\n    if (!this.ecclib)\n      throw new Error('ecclib is missing, cannot derive public key');\n\n    const wif: string = this.masterPrivateKeyNode\n      .derivePath(derivationPath)\n      .toWIF();\n    const { publicKey, privateKey } = ECPairFactory(this.ecclib).fromWIF(\n      wif,\n      this.network\n    );\n    return { publicKey: publicKey!, privateKey: privateKey! };\n  }\n\n  async signPset(psetBase64: string): Promise<string> {\n    if (!this.ecclib) throw new Error('ecclib is missing, cannot sign pset');\n\n    const pset = Psbt.fromBase64(psetBase64);\n    const signInputPromises: Promise<void>[] = [];\n\n    for (let index = 0; index < pset.data.inputs.length; index++) {\n      const input = pset.data.inputs[index];\n      if (input.witnessUtxo) {\n        const addressGeneration = this.scriptToAddressCache[\n          input.witnessUtxo.script.toString('hex')\n        ];\n\n        if (addressGeneration) {\n          // if there is an address generated for the input script: build the signing key pair.\n          const privateKeyBuffer = this.derivePath(\n            addressGeneration.address.derivationPath!\n          ).privateKey;\n          const signingKeyPair = ECPairFactory(this.ecclib).fromPrivateKey(\n            privateKeyBuffer\n          );\n          // add the promise to array\n          signInputPromises.push(pset.signInputAsync(index, signingKeyPair));\n        }\n      }\n    }\n    // wait that all signing promise resolved\n    await Promise.all(signInputPromises);\n    // return the signed pset, base64 encoded.\n    return pset.toBase64();\n  }\n\n  static Random(\n    chain: IdentityOpts<any>['chain'],\n    ecclib: IdentityOpts<any>['ecclib'],\n    baseDerivationPath?: string\n  ): Mnemonic {\n    const randomMnemonic = bip39.generateMnemonic();\n    return new Mnemonic({\n      chain,\n      ecclib,\n      type: IdentityType.Mnemonic,\n      opts: {\n        mnemonic: randomMnemonic,\n        baseDerivationPath,\n      },\n    });\n  }\n}\n","import ECPairFactory, { ECPairInterface } from 'ecpair';\nimport { Psbt, payments } from 'liquidjs-lib';\nimport { BlindingDataLike } from 'liquidjs-lib/src/psbt';\nimport { AddressInterface, IdentityType } from '../types';\nimport { checkIdentityType } from '../utils';\nimport { Identity, IdentityInterface, IdentityOpts } from './identity';\n\n/**\n * This interface describes the shape of the value arguments used in contructor.\n * @member signingKeyWIF a valid private key WIF encoded.\n * @member blindingKeyWIF a valid private key WIF encoded.\n */\nexport interface PrivateKeyOpts {\n  signingKeyWIF: string;\n  blindingKeyWIF: string;\n}\n\n/**\n * The PrivateKey Identity takes a WIF and modelize a user using his private key.\n * @member signingKeyPair private, the key pair used to sign inputs.\n * @member blindingKeyPair private, the key pair used to blind outputs.\n * @member confidentialAddress private, the confidential address generated from keypairs.\n * @member blindingPrivateKey private, the blinding private key associated with the confidential address.\n * @member scriptPubKey private, the scriptPubKey associated to the confidential address.\n * @method signPset sign all the inputs when it's possible (scriptPubKey = input's script).\n * @method getAddresses return an array of one element containing the blindingPrivateKey & the confidentialAddress.\n */\nexport class PrivateKey extends Identity implements IdentityInterface {\n  private signingKeyPair: ECPairInterface;\n  private blindingKeyPair: ECPairInterface;\n\n  private confidentialAddress: string;\n  private blindingPrivateKey: string;\n  private scriptPubKey: Buffer;\n\n  constructor(args: IdentityOpts<PrivateKeyOpts>) {\n    super(args);\n\n    // checks the args type.\n    checkIdentityType(args.type, IdentityType.PrivateKey);\n\n    // decode signing key pair from WIF\n    this.signingKeyPair = this.decodeFromWif(args.opts.signingKeyWIF);\n\n    // decode blinding key pair from WIF\n    this.blindingKeyPair = this.decodeFromWif(args.opts.blindingKeyWIF);\n\n    // create payment\n    const p2wpkh = payments.p2wpkh({\n      pubkey: this.signingKeyPair.publicKey,\n      blindkey: this.blindingKeyPair.publicKey,\n      network: this.network,\n    });\n\n    // store data inside private fields.\n    this.confidentialAddress = p2wpkh.confidentialAddress!;\n    this.blindingPrivateKey = this.blindingKeyPair.privateKey!.toString('hex');\n    this.scriptPubKey = p2wpkh.output!;\n  }\n\n  async blindPset(\n    psetBase64: string,\n    outputsToBlind: number[],\n    outputsPubKeys?: Map<number, string>,\n    inputsBlindingDataLike?: Map<number, BlindingDataLike>\n  ): Promise<string> {\n    return super.blindPsetWithBlindKeysGetter(\n      (script: Buffer) => this.getBlindingKeyPair(script),\n      psetBase64,\n      outputsToBlind,\n      outputsPubKeys,\n      inputsBlindingDataLike\n    );\n  }\n\n  private getBlindingKeyPair(\n    script: Buffer\n  ): { publicKey: Buffer; privateKey: Buffer } {\n    if (!script.equals(this.scriptPubKey)) {\n      throw new Error(script + ' is unknown by the PrivateKey Identity');\n    }\n\n    return {\n      publicKey: this.blindingKeyPair.publicKey,\n      privateKey: this.blindingKeyPair.privateKey!,\n    };\n  }\n\n  isAbleToSign(): boolean {\n    return true;\n  }\n\n  private decodeFromWif(wif: string): ECPairInterface {\n    return ECPairFactory(this.ecclib).fromWIF(wif, this.network);\n  }\n\n  private getAddress(): AddressInterface {\n    return {\n      confidentialAddress: this.confidentialAddress,\n      blindingPrivateKey: this.blindingPrivateKey,\n      derivationPath: undefined,\n      publicKey: this.signingKeyPair.publicKey.toString('hex'),\n    };\n  }\n\n  async getNextAddress(): Promise<AddressInterface> {\n    return this.getAddress();\n  }\n\n  async getNextChangeAddress(): Promise<AddressInterface> {\n    return this.getAddress();\n  }\n\n  async getBlindingPrivateKey(script: string): Promise<string> {\n    const scriptPubKeyBuffer = Buffer.from(script, 'hex');\n    if (!scriptPubKeyBuffer.equals(this.scriptPubKey)) {\n      throw new Error('The script is not PrivateKey.scriptPubKey.');\n    }\n\n    return this.blindingPrivateKey;\n  }\n\n  /**\n   * iterate through inputs and sign when it's possible, then returns the signed pset (base64 encoded).\n   * @param psetBase64 the base64 encoded pset.\n   */\n  async signPset(psetBase64: string): Promise<string> {\n    const pset = Psbt.fromBase64(psetBase64);\n    const indexOfInputs: number[] = [];\n\n    for (let index = 0; index < pset.data.inputs.length; index++) {\n      const input = pset.data.inputs[index];\n      if (input.witnessUtxo) {\n        if (input.witnessUtxo.script.equals(this.scriptPubKey)) {\n          indexOfInputs.push(index);\n        }\n      } else {\n        indexOfInputs.push(index);\n      }\n    }\n\n    // sign all the inputs asynchronously\n    await Promise.all(\n      indexOfInputs.map((index: number) =>\n        pset.signInputAsync(index, this.signingKeyPair)\n      )\n    );\n\n    return pset.toBase64();\n  }\n\n  /**\n   * for private key: only returns one confidential address & the associated blindingPrivKey.\n   */\n  async getAddresses(): Promise<AddressInterface[]> {\n    return [\n      {\n        confidentialAddress: this.confidentialAddress,\n        blindingPrivateKey: this.blindingPrivateKey,\n        derivationPath: undefined,\n        publicKey: this.signingKeyPair.publicKey.toString('hex'),\n      },\n    ];\n  }\n}\n","import { BlindingDataLike } from 'liquidjs-lib/src/psbt';\nimport { AddressInterface, IdentityType } from '../types';\nimport { checkIdentityType } from '../utils';\nimport { Identity, IdentityInterface, IdentityOpts } from './identity';\n\n/**\n * This interface describes the shape of the value arguments used in contructor.\n * @member windowProvider a valid property of the browser's window object where to lookup the injected provider\n */\nexport interface InjectOpts {\n  windowProvider: string;\n}\n\nexport interface BrowserInjectProviderInterface {\n  getNextAddress: () => Promise<AddressInterface>;\n  getNextChangeAddress: () => Promise<AddressInterface>;\n  getAddresses: () => Promise<AddressInterface[]>;\n  signTransaction: (psetBase64: string) => Promise<string>;\n}\n\nexport class BrowserInject extends Identity implements IdentityInterface {\n  // here we force MarinaProvider since there aren't other Liquid injected API specification available as TypeScript interface yet.\n  protected provider: BrowserInjectProviderInterface;\n\n  constructor(args: IdentityOpts<InjectOpts>) {\n    super(args);\n\n    // checks the args type.\n    checkIdentityType(args.type, IdentityType.Inject);\n\n    //checks if we are in the brower and if the provider is injected in the dom\n    if (\n      window === undefined ||\n      (window as any)[args.opts.windowProvider] === undefined\n    ) {\n      throw new Error(\n        'The value.windowProvider of IdentityOpts is not valid or the script is to injected in the window'\n      );\n    }\n\n    // the provider must implement BrowserInjectProviderInterface\n    this.provider = (window as any)[args.opts.windowProvider];\n  }\n\n  getNextAddress(): Promise<AddressInterface> {\n    return this.provider.getNextAddress();\n  }\n  getNextChangeAddress(): Promise<AddressInterface> {\n    return this.provider.getNextChangeAddress();\n  }\n  signPset(psetBase64: string): Promise<string> {\n    return this.provider.signTransaction(psetBase64);\n  }\n  getAddresses(): Promise<AddressInterface[]> {\n    return this.provider.getAddresses();\n  }\n  getBlindingPrivateKey(_: string): Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n  isAbleToSign(): boolean {\n    return true;\n  }\n  blindPset(\n    _: string,\n    __: number[],\n    ___?: Map<number, string>,\n    ____?: Map<number, BlindingDataLike>\n  ): Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { BIP32Interface } from 'bip32';\nimport { networks, payments, crypto, address } from 'liquidjs-lib';\nimport { SLIP77Factory, Slip77Interface, TinySecp256k1Interface } from 'slip77';\nimport { MultisigPayment } from './types';\n\n/**\n * Create a P2MS redeemscript.\n * + conf address\n * + unconf address\n * @param keys co-signers public keys.\n * @param blindingKey\n * @param required number of signature required in multisig script.\n * @param network\n */\nexport function p2msPayment(\n  keys: BIP32Interface[],\n  blindingKey: Slip77Interface,\n  required: number,\n  network: networks.Network\n): MultisigPayment {\n  // first generate the unconfidential payment\n  let multisigPayment = payments.p2wsh({\n    redeem: payments.p2ms({\n      m: parseInt(required.toString()), // this is a trick in case of the input returns a string at runtime\n      pubkeys: bip67sort(keys.map(key => key.publicKey)),\n      network,\n    }),\n    network,\n  });\n\n  if (!multisigPayment.address) throw new Error('Invalid payment');\n\n  // generate blinding key\n  const { publicKey, privateKey } = blindingKey.derive(\n    address.toOutputScript(multisigPayment.address, network)\n  );\n  if (!publicKey || !privateKey)\n    throw new Error('something went wrong while generating blinding key pair');\n\n  multisigPayment = payments.p2wsh({\n    redeem: payments.p2ms({\n      m: parseInt(required.toString()), // this is a trick in case of the input returns a string at runtime\n      pubkeys: bip67sort(keys.map(key => key.publicKey)),\n      network,\n    }),\n    blindkey: publicKey,\n    network,\n  });\n\n  if (\n    !multisigPayment.confidentialAddress ||\n    !multisigPayment.redeem ||\n    !multisigPayment.redeem.output\n  )\n    throw new Error('invalid payment');\n\n  return {\n    blindingPrivateKey: privateKey.toString('hex'),\n    confidentialAddress: multisigPayment.confidentialAddress,\n    witnessScript: multisigPayment.redeem.output.toString('hex'),\n  };\n}\n\n/**\n * Return a blinding key from a list of extended keys.\n * @param extendedKeys must be the first addresses of multi-sig stakeholders.\n */\nexport function blindingKeyFromXPubs(\n  extendedKeys: BIP32Interface[],\n  ecclib: TinySecp256k1Interface\n): Slip77Interface {\n  const chainCodes = extendedKeys.map(key => key.chainCode);\n  const seed = blindingKeyFromChainCode(chainCodes);\n  return SLIP77Factory(ecclib).fromSeed(seed);\n}\n\n/**\n * Returns sha256(\"blinding_key\" + xor(chaincodes)) as a blinding key for multisig wallet.\n * https://github.com/cryptoadvance/specter-desktop/blob/master/src/cryptoadvance/specter/liquid/wallet.py#L77-L85\n * @param chainCodes the co-signers xpubs chainCodes (from the first receiving address)\n */\nfunction blindingKeyFromChainCode(chainCodes: Buffer[]): Buffer {\n  const prefix = Buffer.from('blinding_key');\n  let chainCodesXOR = Buffer.alloc(32);\n  for (const chainCode of chainCodes) {\n    chainCodesXOR = xor(chainCodesXOR, chainCode);\n  }\n\n  return crypto.sha256(Buffer.concat([prefix, chainCodesXOR]));\n}\n\n// a xor b\nfunction xor(a: Buffer, b: Buffer): Buffer {\n  if (a.length !== b.length) throw new Error('a.length !== b.length (xor)');\n\n  const result = Buffer.alloc(a.length);\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i];\n  }\n\n  return result;\n}\n\nexport function bip67sort(array: Buffer[]) {\n  return array.sort(bip67compareFunction);\n}\n\nfunction bip67compareFunction(a: Buffer, b: Buffer): number {\n  return a.toString('hex') < b.toString('hex') ? -1 : 1;\n}\n","import BIP32Factory, { BIP32Interface, TinySecp256k1Interface } from 'bip32';\nimport { mnemonicToSeedSync } from 'bip39';\nimport { networks } from 'liquidjs-lib';\nimport { BlindingDataLike } from 'liquidjs-lib/src/psbt';\nimport { Slip77Interface } from 'slip77';\nimport { blindingKeyFromXPubs, p2msPayment } from '../p2ms';\nimport {\n  AddressInterface,\n  MultisigPayment,\n  CosignerMultisig,\n  XPub,\n} from '../types';\nimport { IdentityType } from '../types';\nimport { checkIdentityType, isValidXpub, toXpub } from '../utils';\nimport { IdentityInterface, IdentityOpts } from './identity';\nimport { Identity } from './identity';\n\nexport const DEFAULT_BASE_DERIVATION_PATH = \"m/48'/0'/0'/2'\"; // --> bip48\n\n/**\n * the public keys required to sign are defined by cosignersPublicKeys (xpub)\n * the required number of signature must be < length of cosigners xpubs\n */\nexport interface MultisigWatchOnlyOpts {\n  cosigners: CosignerMultisig[];\n  requiredSignatures: number;\n}\n\nexport class MultisigWatchOnly extends Identity implements IdentityInterface {\n  private nextIndex = 0;\n  private nextChangeIndex = 0;\n\n  static EXTERNAL_INDEX = 0;\n  static INTERNAL_INDEX = 1; // change addresses\n\n  cosigners: BIP32Interface[];\n  blindingKeyMasterNode: Slip77Interface;\n  requiredSignatures: number;\n\n  constructor(args: IdentityOpts<MultisigWatchOnlyOpts>) {\n    super(args);\n    checkIdentityType(args.type, IdentityType.MultisigWatchOnly);\n    checkRequiredSignature(\n      args.opts.requiredSignatures,\n      args.opts.cosigners.length\n    );\n\n    const cosignersPublicKeys = args.opts.cosigners.map(cosigner =>\n      cosignerToXPub(cosigner, this.network, this.ecclib)\n    );\n    cosignersPublicKeys.forEach(isValidXpub);\n\n    this.cosigners = cosignersPublicKeys\n      .sort()\n      .map(xpub => BIP32Factory(this.ecclib).fromBase58(xpub));\n    this.blindingKeyMasterNode = blindingKeyFromXPubs(\n      this.cosigners,\n      this.ecclib\n    );\n\n    this.requiredSignatures = args.opts.requiredSignatures;\n  }\n\n  getNextAddress() {\n    const addr = this.getMultisigAddress(\n      MultisigWatchOnly.EXTERNAL_INDEX,\n      this.nextIndex\n    );\n    this.nextIndex++;\n    return Promise.resolve(addr);\n  }\n\n  getNextChangeAddress() {\n    const addr = this.getMultisigAddress(\n      MultisigWatchOnly.INTERNAL_INDEX,\n      this.nextChangeIndex\n    );\n    this.nextChangeIndex++;\n    return Promise.resolve(addr);\n  }\n\n  getAddresses(): Promise<AddressInterface[]> {\n    const externals = Array.from(Array(this.nextIndex).keys()).map(index =>\n      this.getMultisigAddress(MultisigWatchOnly.EXTERNAL_INDEX, index)\n    );\n    const internals = Array.from(\n      Array(this.nextChangeIndex).keys()\n    ).map(index =>\n      this.getMultisigAddress(MultisigWatchOnly.INTERNAL_INDEX, index)\n    );\n\n    return Promise.resolve(externals.concat(internals));\n  }\n\n  getBlindingPrivateKey(script: string): Promise<string> {\n    const privKey = this.getBlindingKeyPair(script).privateKey;\n    return Promise.resolve(privKey.toString('hex'));\n  }\n\n  private getBlindingKeyPair(script: string) {\n    const keys = this.blindingKeyMasterNode.derive(script);\n    if (!keys.publicKey || !keys.privateKey)\n      throw new Error('unable to generate blinding key pair');\n    return { publicKey: keys.publicKey, privateKey: keys.privateKey };\n  }\n\n  isAbleToSign(): boolean {\n    return false;\n  }\n\n  signPset(_: string): Promise<string> {\n    throw new Error('WatchOnly Multisig Identity is not able to sign pset');\n  }\n\n  blindPset(\n    psetBase64: string,\n    outputsIndexToBlind: number[],\n    outputsPubKeysByIndex?: Map<number, string>,\n    inputsBlindingDataLike?: Map<number, BlindingDataLike>\n  ): Promise<string> {\n    return super.blindPsetWithBlindKeysGetter(\n      (script: Buffer) => this.getBlindingKeyPair(script.toString('hex')),\n      psetBase64,\n      outputsIndexToBlind,\n      outputsPubKeysByIndex,\n      inputsBlindingDataLike\n    );\n  }\n\n  getMultisigAddress(change: number, index: number): MultisigPayment {\n    const keys = this.cosigners.map(cosigner =>\n      cosigner.derive(change).derive(index)\n    );\n\n    const payment = p2msPayment(\n      keys,\n      this.blindingKeyMasterNode,\n      this.requiredSignatures,\n      this.network\n    );\n\n    return { ...payment, derivationPath: `${change}/${index}` };\n  }\n}\n\nfunction checkRequiredSignature(required: number, cosignersLength: number) {\n  if (required <= 0 || required > cosignersLength) {\n    throw new Error(\n      `number of required signatures must be > 0 and <= ${cosignersLength}`\n    );\n  }\n}\n\nfunction cosignerToXPub(\n  cosigner: CosignerMultisig,\n  network: networks.Network,\n  ecclib: TinySecp256k1Interface\n): XPub {\n  if (typeof cosigner === 'string') return cosigner;\n  const walletSeed = mnemonicToSeedSync(cosigner.mnemonic, cosigner.passphrase);\n  const bip32 = BIP32Factory(ecclib);\n  const baseNode = bip32\n    .fromSeed(walletSeed, network)\n    .derivePath(cosigner.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH);\n  return toXpub(\n    bip32\n      .fromPublicKey(baseNode.publicKey, baseNode.chainCode, network)\n      .toBase58()\n  );\n}\n","import BIP32Factory, { BIP32Interface } from 'bip32';\nimport { mnemonicToSeedSync } from 'bip39';\nimport ECPairFactory from 'ecpair';\nimport { address, networks, Psbt } from 'liquidjs-lib';\nimport { Network } from 'liquidjs-lib/src/networks';\nimport { IdentityType, HDSignerMultisig } from '../types';\nimport { checkIdentityType, checkMnemonic, toXpub } from '../utils';\nimport { IdentityInterface, IdentityOpts } from './identity';\nimport {\n  DEFAULT_BASE_DERIVATION_PATH,\n  MultisigWatchOnly,\n  MultisigWatchOnlyOpts,\n} from './multisigWatchOnly';\n\nexport type MultisigOpts = {\n  signer: HDSignerMultisig;\n} & MultisigWatchOnlyOpts;\n\nexport class Multisig extends MultisigWatchOnly implements IdentityInterface {\n  readonly baseDerivationPath: string;\n  readonly baseNode: BIP32Interface;\n  readonly scriptToPath: Record<string, string>;\n\n  constructor(args: IdentityOpts<MultisigOpts>) {\n    checkIdentityType(args.type, IdentityType.Multisig);\n    checkMnemonic(args.opts.signer.mnemonic);\n\n    const walletSeed = mnemonicToSeedSync(\n      args.opts.signer.mnemonic,\n      args.opts.signer.passphrase\n    );\n    const network = (networks as Record<string, Network>)[args.chain];\n    const masterPrivateKeyNode = BIP32Factory(args.ecclib).fromSeed(\n      walletSeed,\n      network\n    );\n\n    const baseNode = masterPrivateKeyNode.derivePath(\n      args.opts.signer.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH\n    );\n\n    super({\n      ...args,\n      opts: {\n        ...args.opts,\n        cosigners: args.opts.cosigners.concat([args.opts.signer]),\n      },\n      type: IdentityType.MultisigWatchOnly,\n    });\n\n    this.baseDerivationPath =\n      args.opts.signer.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH;\n    this.baseNode = baseNode;\n    this.scriptToPath = {};\n  }\n\n  async getNextAddress() {\n    const next = await super.getNextAddress();\n    if (!next.derivationPath)\n      throw new Error('need derivation path to cache addresses');\n    this.scriptToPath[this.toScript(next.confidentialAddress)] =\n      next.derivationPath;\n    return next;\n  }\n\n  async getNextChangeAddress() {\n    const next = await super.getNextChangeAddress();\n    if (!next.derivationPath)\n      throw new Error('need derivation path to cache addresses');\n    this.scriptToPath[this.toScript(next.confidentialAddress)] =\n      next.derivationPath;\n    return next;\n  }\n\n  isAbleToSign(): boolean {\n    return true;\n  }\n\n  async signPset(psetBase64: string): Promise<string> {\n    const pset = Psbt.fromBase64(psetBase64);\n    const signInputPromises: Promise<void>[] = [];\n\n    for (let index = 0; index < pset.data.inputs.length; index++) {\n      const input = pset.data.inputs[index];\n      if (input.witnessUtxo) {\n        const derivationPath = this.scriptToPath[\n          input.witnessUtxo.script.toString('hex')\n        ];\n\n        if (derivationPath) {\n          // if there is an address generated for the input script: build the signing key pair.\n          const privKey = this.baseNode.derivePath(derivationPath).privateKey;\n          if (!privKey) throw new Error('signing private key is undefined');\n          const signingKeyPair = ECPairFactory(this.ecclib).fromPrivateKey(\n            privKey\n          );\n          // add the promise to array\n          signInputPromises.push(pset.signInputAsync(index, signingKeyPair));\n        }\n      }\n    }\n    // wait that all signing promise resolved\n    await Promise.all(signInputPromises);\n    // return the signed pset, base64 encoded.\n    return pset.toBase64();\n  }\n\n  getXPub(): string {\n    return toXpub(\n      BIP32Factory(this.ecclib)\n        .fromPublicKey(\n          this.baseNode.publicKey,\n          this.baseNode.chainCode,\n          this.network\n        )\n        .toBase58()\n    );\n  }\n\n  private toScript(addr: string) {\n    return address.toOutputScript(addr, this.network).toString('hex');\n  }\n}\n","import {\n  ChangeAddressFromAssetGetter,\n  CoinSelectorErrorFn,\n  RecipientInterface,\n  UnblindedOutput,\n  getSats,\n  getAsset,\n} from '../types';\nimport { CompareUtxoFn } from './greedy';\n\nexport const throwErrorHandler: CoinSelectorErrorFn = (\n  asset: string,\n  need: number,\n  has: number\n) => {\n  throw new Error(\n    `not enought funds to fill ${need}sats of ${asset} (amount selected: ${has})`\n  );\n};\n\n// makeChanges creates the change RecipientInterface if needed\nexport const makeChanges = (\n  changeAddressGetter: ChangeAddressFromAssetGetter\n) => (toSelect: Map<string, number>) => (\n  selectedUtxos: UnblindedOutput[]\n): RecipientInterface[] => {\n  const recipients: RecipientInterface[] = [];\n  toSelect.forEach((amount: number, asset: string) => {\n    const changeAmount = diff(selectedUtxos)(asset)(amount);\n    if (changeAmount > 0) {\n      // has change\n      recipients.push({\n        address: changeAddressGetter(asset),\n        asset,\n        value: changeAmount,\n      });\n    }\n  });\n  return recipients;\n};\n\nconst diff = (utxos: UnblindedOutput[]) => (asset: string) => {\n  const sum = sumUtxos(asset)(utxos);\n  return (amount: number) => sum - amount;\n};\n\nconst sumUtxos = (asset: string) => (utxos: UnblindedOutput[]): number =>\n  utxos\n    .filter(makeAssetFilter(asset))\n    .reduce((sum: number, utxo: UnblindedOutput) => sum + getSats(utxo), 0);\n\n// coinSelect is used to select utxo until they fill the amount requested\nexport const coinSelect = (compareFn: CompareUtxoFn) => (\n  errorHandler: CoinSelectorErrorFn\n) => (utxos: UnblindedOutput[]) => (toSelect: Map<string, number>) => {\n  const selectors: ((utxos: UnblindedOutput[]) => UnblindedOutput[])[] = [];\n  const coinSelectorFilter = coinSelectUtxosFilter(compareFn)(errorHandler);\n  toSelect.forEach((amount: number, asset: string) => {\n    selectors.push(coinSelectorFilter(asset)(amount));\n  });\n  return selectors.flatMap(fnSelect => fnSelect(utxos));\n};\n\nexport function reduceRecipients(recipients: RecipientInterface[]) {\n  // - Sanitize recipient.value, it must be a number.\n  // - If is not, try to coerce it into number.\n  // - Throw error if at the end is still not a number.\n  // We were getting 'value' as a string without typescript complaining.\n  // See https://github.com/vulpemventures/ldk/issues/103\n  for (const recipient of recipients) {\n    if (typeof recipient.value !== 'number') {\n      recipient.value = parseInt(recipient.value);\n      if (typeof recipient.value !== 'number') {\n        throw new Error(\n          `invalid '${typeof recipient.value}' type for recipient.value`\n        );\n      }\n    }\n  }\n  return recipients.reduce(recipientsReducer, new Map<string, number>());\n}\n\nfunction recipientsReducer(\n  results: Map<string, number>,\n  next: RecipientInterface\n) {\n  results.set(next.asset, (results.get(next.asset) || 0) + next.value);\n  return results;\n}\n\nfunction makeAssetFilter(assetToFilter: string) {\n  return function(u: UnblindedOutput) {\n    const asset = getAsset(u);\n    return asset === assetToFilter;\n  };\n}\n\nconst coinSelectUtxosFilter = (compareFn: CompareUtxoFn) => (\n  errorHandler: CoinSelectorErrorFn\n) => (asset: string) => (amount: number) => (\n  utxos: UnblindedOutput[]\n): UnblindedOutput[] => {\n  let amtSelected = 0;\n  const assetsUtxos = utxos.filter(makeAssetFilter(asset));\n\n  const selected = assetsUtxos\n    .sort(compareFn)\n    .reduce((selected: UnblindedOutput[], next: UnblindedOutput) => {\n      if (amtSelected <= amount) {\n        selected.push(next);\n        amtSelected += getSats(next);\n      }\n      return selected;\n    }, []);\n\n  // if not enougth amount is selected, use errorHandler\n  if (amtSelected < amount) errorHandler(asset, amount, amtSelected);\n  return selected;\n};\n\nexport const checkCoinSelect = (recipients: RecipientInterface[]) => (\n  selectedUtxos: UnblindedOutput[]\n) => {\n  const inputs = selectedUtxos.map(u => ({\n    value: getSats(u) || 0,\n    asset: getAsset(u) || '',\n  }));\n  return check(inputs)(recipients);\n};\n\nconst check = (inputs: { asset: string; value: number }[]) => (\n  outputs: { asset: string; value: number }[]\n) => {\n  const groupByAsset = groupBy<{ asset: string; value: number }, string>(\n    'asset'\n  );\n  const inputsByAsset = groupByAsset(inputs);\n  const outputsByAsset = groupByAsset(outputs);\n  const inputsAssets = Object.keys(inputsByAsset).sort();\n  const outputsAssets = Object.keys(outputsByAsset).sort();\n\n  if (!inputsAssets.every((asset: string) => outputsAssets.includes(asset))) {\n    throw new Error(\n      `inputs and outputs don't have the same assets. Inputs assets = ${inputsAssets}, Outputs assets = ${outputsAssets}`\n    );\n  }\n\n  for (const asset in inputsByAsset) {\n    const sumInputs = sumNumbers(\n      inputsByAsset[asset].map(({ value }) => value)\n    );\n    const sumOutputs = sumNumbers(\n      outputsByAsset[asset].map(({ value }) => value)\n    );\n\n    if (sumInputs !== sumOutputs) {\n      throw new Error(\n        `missing funds for asset ${asset} (inputs: ${sumInputs}, outputs: ${sumOutputs})`\n      );\n    }\n  }\n};\n\nconst sumNumbers = (values: number[]) =>\n  values.reduce(function(acc, current) {\n    return acc + current;\n  }, 0);\n\nfunction groupBy<\n  T extends Record<string, any>,\n  R extends string | number | symbol\n>(key: string) {\n  return (xs: T[]): Record<R, T[]> => {\n    return xs.reduce(function(rv: Record<any, T[]>, x: T) {\n      (rv[x[key]] = rv[x[key]] || []).push(x);\n      return rv;\n    }, {});\n  };\n}\n","import {\n  ChangeAddressFromAssetGetter,\n  RecipientInterface,\n  getSats,\n  UnblindedOutput,\n} from './../types';\nimport { CoinSelectionResult, CoinSelector } from './coinSelector';\n\nimport {\n  coinSelect,\n  makeChanges,\n  reduceRecipients,\n  throwErrorHandler,\n} from './utils';\n\nexport type CompareUtxoFn = (a: UnblindedOutput, b: UnblindedOutput) => number;\n\nconst defaultCompareFn: CompareUtxoFn = (\n  a: UnblindedOutput,\n  b: UnblindedOutput\n) => getSats(a) - getSats(b);\n\n/**\n * select utxo for outputs among unspents.\n * @param unspents a set of unspents.\n * @param recipients the outputs targetted by the coin selection\n */\nexport function greedyCoinSelector(sortFn = defaultCompareFn): CoinSelector {\n  return (errorHandler = throwErrorHandler) => {\n    const coinSelectFn = coinSelect(sortFn)(errorHandler);\n    return (\n      unspents: UnblindedOutput[],\n      recipients: RecipientInterface[],\n      changeAddressGetter: ChangeAddressFromAssetGetter\n    ): CoinSelectionResult => {\n      const makeChangesFn = makeChanges(changeAddressGetter);\n      const recipientsMap = reduceRecipients(recipients);\n      const selectedUtxos = coinSelectFn(unspents)(recipientsMap);\n      const changeOutputs = makeChangesFn(recipientsMap)(selectedUtxos);\n\n      return {\n        selectedUtxos,\n        changeOutputs,\n      };\n    };\n  };\n}\n","import axios from 'axios';\nimport { Transaction, TxOutput } from 'liquidjs-lib';\nimport {\n  TxInterface,\n  InputInterface,\n  Output,\n  Outpoint,\n  isUnblindedOutput,\n  getSats,\n  getAsset,\n} from '../types';\nimport { EsploraTx, EsploraUtxo } from './types';\n\n/**\n * Fetch the raw transaction by txid\n * @param txId txID to fetch\n * @param url esplora URL\n */\nexport async function fetchTxHex(txId: string, url: string): Promise<string> {\n  return (await axios.get(`${url}/tx/${txId}/hex`)).data;\n}\n\n/**\n * Fetch the transaction as TxInterface (with prevouts)\n * @param txId transaction's hash to fetch\n * @param url the esplora URL\n */\nexport async function fetchTx(txId: string, url: string): Promise<TxInterface> {\n  return esploraTxToTxInterface(\n    (await axios.get(`${url}/tx/${txId}`)).data,\n    url\n  );\n}\n\n/**\n * Fetch unspents for a given address.\n * @param address\n * @param url the esplora URL\n */\nexport async function fetchUtxos(\n  address: string,\n  url: string\n): Promise<Output[]> {\n  const esploraUtxos: EsploraUtxo[] = (\n    await axios.get(`${url}/address/${address}/utxo`)\n  ).data;\n  return Promise.all(esploraUtxos.map(outpointToUtxo(url)));\n}\n\nconst outpointToUtxo = (esploraURL: string) => async (\n  outpoint: Outpoint\n): Promise<Output> => {\n  const prevoutHex: string = await fetchTxHex(outpoint.txid, esploraURL);\n  const prevout = Transaction.fromHex(prevoutHex).outs[outpoint.vout];\n  return { ...outpoint, prevout };\n};\n\n/**\n * Convert an esplora transaction to a TxInterface\n * @param esploraTx\n * @param explorerUrl\n */\nexport async function esploraTxToTxInterface(\n  esploraTx: EsploraTx,\n  explorerUrl: string\n): Promise<TxInterface> {\n  const inputTxIds: string[] = [];\n  const inputVouts: number[] = [];\n\n  for (const input of esploraTx.vin) {\n    inputTxIds.push(input.txid);\n    inputVouts.push(input.vout);\n  }\n\n  const prevoutTxHexs = await Promise.all(\n    inputTxIds.map((txid, index) => {\n      if (!esploraTx.vin[index].is_pegin) return fetchTxHex(txid, explorerUrl);\n      return Promise.resolve(undefined); // return undefined in case of pegin\n    })\n  );\n\n  const prevoutAsOutput = prevoutTxHexs.map(\n    (hex: string | undefined, index: number) => {\n      if (!hex) return undefined;\n      return makeOutput(\n        { txid: inputTxIds[index], vout: inputVouts[index] },\n        Transaction.fromHex(hex).outs[inputVouts[index]]\n      );\n    }\n  );\n\n  const txInputs: InputInterface[] = inputTxIds.map(\n    (txid: string, index: number) => {\n      return {\n        prevout: prevoutAsOutput[index],\n        txid: txid,\n        vout: inputVouts[index],\n        isPegin: esploraTx.vin[index].is_pegin,\n      };\n    }\n  );\n\n  const txHex = await fetchTxHex(esploraTx.txid, explorerUrl);\n  const transaction = Transaction.fromHex(txHex);\n\n  const makeOutpoint = (index: number): Outpoint => ({\n    txid: esploraTx.txid,\n    vout: index,\n  });\n  const makeOutputFromTxout = (txout: TxOutput, index: number): Output =>\n    makeOutput(makeOutpoint(index), txout);\n  const txOutputs = transaction.outs.map(makeOutputFromTxout);\n\n  const tx: TxInterface = {\n    txid: esploraTx.txid,\n    vin: txInputs,\n    vout: txOutputs,\n    fee: esploraTx.fee,\n    status: {\n      confirmed: esploraTx.status.confirmed,\n      blockHash: esploraTx.status.block_hash,\n      blockHeight: esploraTx.status.block_height,\n      blockTime: esploraTx.status.block_time,\n    },\n  };\n\n  return tx;\n}\n\n// util function for output mapping\nfunction makeOutput(outpoint: Outpoint, txOutput: TxOutput): Output {\n  return {\n    ...outpoint,\n    prevout: txOutput,\n  };\n}\n\n/**\n * Create unblinded explorer URL from blinding data\n * @param baseURL\n * @param txID\n * @param outputsBlinder\n */\nexport function makeUnblindURL(\n  baseURL: string,\n  txID: string,\n  outputsBlinder: {\n    value: number;\n    asset: string;\n    assetBlinder: string;\n    valueBlinder: string;\n  }[]\n): string {\n  const outputsString = outputsBlinder\n    .map(\n      ({ value, asset, assetBlinder, valueBlinder }) =>\n        `${value},${asset},${valueBlinder},${assetBlinder}`\n    )\n    .join(',');\n  return `${baseURL}/tx/${txID}#blinded=${outputsString}`;\n}\n\n/**\n * Create explorer URL with unblinding data\n * @param tx transaction to create the link for\n * @param baseURL base web Explorer URL\n */\nexport function getUnblindURLFromTx(tx: TxInterface, baseURL: string) {\n  const outputsData: {\n    value: number;\n    asset: string;\n    assetBlinder: string;\n    valueBlinder: string;\n  }[] = [];\n\n  const reverseHex = (blinder: string) =>\n    Buffer.from(blinder, 'hex')\n      .reverse()\n      .toString('hex');\n\n  for (const output of tx.vout) {\n    if (output.prevout.script.length > 0 && isUnblindedOutput(output)) {\n      outputsData.push({\n        value: getSats(output),\n        asset: getAsset(output),\n        assetBlinder: reverseHex(\n          output.unblindData.assetBlindingFactor.toString('hex')\n        ),\n        valueBlinder: reverseHex(\n          output.unblindData.valueBlindingFactor.toString('hex')\n        ),\n      });\n    }\n  }\n\n  return makeUnblindURL(baseURL, tx.txid, outputsData);\n}\n","export default class UnblindError extends Error {\n  constructor(txid: string, vout: number, blindingKey: string) {\n    super(\n      `UnblindError output (${txid}:${vout}) with blind key ${blindingKey}`\n    );\n  }\n}\n","import axios from 'axios';\nimport UnblindError from '../error/unblind-error';\nimport {\n  BlindingKeyGetter,\n  BlindingKeyGetterAsync,\n  isUnblindedOutput,\n  TxInterface,\n} from '../types';\nimport { isConfidentialOutput, unblindOutput } from '../utils';\nimport { esploraTxToTxInterface } from './esplora';\nimport { EsploraTx } from './types';\n\n/**\n * Return an async generator fetching and unblinding addresses' transactions\n * @param addresses\n * @param blindingKeyGetter\n * @param explorerUrl\n * @param skip optional, can be used to skip certain transaction\n */\nexport async function* fetchAndUnblindTxsGenerator(\n  addresses: string[],\n  blindingKeyGetter: BlindingKeyGetter,\n  explorerUrl: string,\n  skip?: (tx: TxInterface) => boolean\n): AsyncGenerator<\n  TxInterface,\n  { txIDs: string[]; errors: Error[] },\n  undefined\n> {\n  const txIDs: string[] = [];\n  const errors: Error[] = [];\n\n  for (const address of addresses) {\n    try {\n      const txsGenerator = fetchTxsGenerator(address, explorerUrl, skip);\n      let txIterator = await txsGenerator.next();\n      while (!txIterator.done) {\n        const tx = txIterator.value;\n        if (txIDs.includes(tx.txid)) {\n          txIterator = await txsGenerator.next();\n          continue;\n        }\n\n        const { unblindedTx, errors: errs } = await unblindTransaction(\n          tx,\n          async (script: string) => blindingKeyGetter(script)\n        );\n        errors.push(...errs);\n        yield unblindedTx;\n\n        txIDs.push(tx.txid);\n        txIterator = await txsGenerator.next();\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        errors.push(err);\n      }\n\n      if (typeof err === 'string') {\n        errors.push(new Error(err));\n      }\n\n      errors.push(new Error('unknown error'));\n    }\n  }\n  return { txIDs, errors };\n}\n\n/**\n * Use FetchAndUnblindTxsGenerator to get all utxos for a set of addresses\n * @param addresses\n * @param blindingKeyGetter\n * @param explorerUrl\n * @param skip optional\n */\nexport async function fetchAndUnblindTxs(\n  addresses: string[],\n  blindingKeyGetter: BlindingKeyGetter,\n  explorerUrl: string,\n  skip?: (tx: TxInterface) => boolean\n): Promise<TxInterface[]> {\n  const generator = fetchAndUnblindTxsGenerator(\n    addresses,\n    blindingKeyGetter,\n    explorerUrl,\n    skip\n  );\n\n  const txs: TxInterface[] = [];\n\n  let iterator = await generator.next();\n  while (!iterator.done) {\n    txs.push(iterator.value);\n    iterator = await generator.next();\n  }\n\n  return txs;\n}\n\n/**\n * Fetch all the txs associated to a given address and unblind them using the blindingPrivateKey.\n * @param address the confidential address\n * @param explorerUrl the Esplora URL API using to fetch blockchain data.\n */\nasync function* fetchTxsGenerator(\n  address: string,\n  explorerUrl: string,\n  skip?: (tx: TxInterface) => boolean\n): AsyncGenerator<TxInterface, number, undefined> {\n  let lastSeenTxid = undefined;\n  let newTxs: EsploraTx[] = [];\n  let numberOfTxs = 0;\n\n  do {\n    // fetch up to 25 txs\n    newTxs = await fetch25newestTxsForAddress(\n      address,\n      explorerUrl,\n      lastSeenTxid\n    );\n\n    if (newTxs.length === 0) break;\n    lastSeenTxid = newTxs[newTxs.length - 1].txid;\n    numberOfTxs += newTxs.length;\n\n    // convert them into txInterface\n    const txs: Promise<TxInterface>[] = newTxs.map(tx =>\n      esploraTxToTxInterface(tx, explorerUrl)\n    );\n\n    for (const tx of txs) {\n      const transaction = await tx;\n      if (skip?.(transaction)) {\n        continue;\n      }\n      yield transaction;\n    }\n  } while (lastSeenTxid);\n\n  return numberOfTxs;\n}\n\n/**\n * takes the a TxInterface and try to transform BlindedOutputInterface to UnblindedOutputInterface (prevouts & outputs)\n * @param tx transaction to unblind\n * @param blindingPrivateKeys the privateKeys using to unblind the outputs.\n */\nexport async function unblindTransaction(\n  tx: TxInterface,\n  blindingPrivateKeyGetter: BlindingKeyGetterAsync\n): Promise<{ unblindedTx: TxInterface; errors: UnblindError[] }> {\n  const promises: Promise<void>[] = [];\n  const errors: UnblindError[] = [];\n\n  // try to unblind prevouts, if success replace blinded prevout by unblinded prevout\n  for (let inputIndex = 0; inputIndex < tx.vin.length; inputIndex++) {\n    const output = tx.vin[inputIndex].prevout;\n    if (output && isConfidentialOutput(output.prevout)) {\n      const promise = async () => {\n        const blindingKey = await blindingPrivateKeyGetter(\n          output.prevout.script.toString('hex')\n        );\n        if (blindingKey) {\n          try {\n            const unblinded = await unblindOutput(output, blindingKey);\n            tx.vin[inputIndex].prevout = unblinded;\n          } catch (_) {\n            errors.push(\n              new UnblindError(\n                tx.vin[inputIndex].txid,\n                tx.vin[inputIndex].vout,\n                blindingKey\n              )\n            );\n          }\n        }\n      };\n\n      promises.push(promise());\n    }\n  }\n\n  // try to unblind outputs\n  for (let outputIndex = 0; outputIndex < tx.vout.length; outputIndex++) {\n    const output = tx.vout[outputIndex];\n    if (!isUnblindedOutput(output)) {\n      const promise = async () => {\n        const blindingKey = await blindingPrivateKeyGetter(\n          output.prevout.script.toString('hex')\n        );\n        if (blindingKey) {\n          try {\n            const unblinded = await unblindOutput(output, blindingKey);\n            tx.vout[outputIndex] = unblinded;\n          } catch (err) {\n            errors.push(new UnblindError(tx.txid, outputIndex, blindingKey));\n          }\n        }\n      };\n\n      promises.push(promise());\n    }\n  }\n\n  await Promise.all(promises);\n\n  return { unblindedTx: tx, errors };\n}\n\nasync function fetch25newestTxsForAddress(\n  address: string,\n  explorerUrl: string,\n  lastSeenTxid?: string\n): Promise<EsploraTx[]> {\n  let url = `${explorerUrl}/address/${address}/txs/chain`;\n  if (lastSeenTxid) {\n    url += `/${lastSeenTxid}`;\n  }\n\n  const response = await axios.get(url);\n  return response.data;\n}\n","import ECPairFactory, { TinySecp256k1Interface } from 'ecpair';\nimport { address } from 'liquidjs-lib';\nimport UnblindError from '../error/unblind-error';\nimport {\n  AddressInterface,\n  InputInterface,\n  TxInterface,\n  UnblindedOutput,\n  Output,\n} from '../types';\nimport { unblindOutput } from '../utils';\nimport { fetchUtxos } from './esplora';\n\n/**\n * fetchAndUnblindUtxosGenerator returns the unblinded utxos associated with a set of addresses.\n * @param addressesAndBlindingKeys the set of addresses with blinding key (if confidential)\n * @param url esplora URL\n * @param skip optional, using to skip blinding step\n */\nexport async function* fetchAndUnblindUtxosGenerator(\n  ecclib: TinySecp256k1Interface,\n  addressesAndBlindingKeys: AddressInterface[],\n  url: string,\n  skip?: (utxo: Output) => boolean\n): AsyncGenerator<\n  UnblindedOutput,\n  { numberOfUtxos: number; errors: Error[] },\n  undefined\n> {\n  let numberOfUtxos = 0;\n  const errors = [];\n\n  // the generator repeats the process for each addresses\n  for (const {\n    confidentialAddress,\n    blindingPrivateKey,\n  } of addressesAndBlindingKeys) {\n    try {\n      // check the blinding private key\n      if (blindingPrivateKey.length > 0) {\n        const blindingKeyPair = ECPairFactory(ecclib).fromPrivateKey(\n          Buffer.from(blindingPrivateKey, 'hex')\n        );\n        const addressPublicKey = address.fromConfidential(confidentialAddress)\n          .blindingKey;\n        if (!blindingKeyPair.publicKey.equals(addressPublicKey)) {\n          throw new Error('wrong blinding private key');\n        }\n      }\n\n      // fetch the unspents\n      const blindedUtxos = await fetchUtxos(confidentialAddress, url);\n\n      // at each 'next' call, the generator will return the result of the next promise\n      for (const blindedUtxo of blindedUtxos) {\n        if (skip?.(blindedUtxo)) continue;\n\n        yield await tryToUnblindUtxo(blindedUtxo, blindingPrivateKey);\n        numberOfUtxos++;\n      }\n    } catch (err) {\n      if (err instanceof Error) errors.push(err);\n      if (typeof err === 'string') errors.push(new Error(err));\n      errors.push(new Error('unknow error'));\n    }\n  }\n  return { numberOfUtxos, errors };\n}\n\n// Aggregate generator's result.\nexport async function fetchAndUnblindUtxos(\n  ecclib: TinySecp256k1Interface,\n  addressesAndBlindingKeys: AddressInterface[],\n  url: string,\n  skip?: (utxo: Output) => boolean\n): Promise<UnblindedOutput[]> {\n  const utxosGenerator = fetchAndUnblindUtxosGenerator(\n    ecclib,\n    addressesAndBlindingKeys,\n    url,\n    skip\n  );\n  const utxos: UnblindedOutput[] = [];\n\n  let iterator = await utxosGenerator.next();\n  while (!iterator.done) {\n    utxos.push(iterator.value);\n    iterator = await utxosGenerator.next();\n  }\n\n  return utxos;\n}\n\n/**\n * try to unblind the utxo with blindPrivKey. if unblind fails, return utxo\n * if unblind step success: set prevout & unblindData members in UtxoInterface result\n * @param utxo utxo to unblind\n * @param blindPrivKey the blinding private key using to unblind\n * @param url esplora endpoint URL\n */\nexport async function tryToUnblindUtxo(\n  utxo: Output,\n  blindPrivKey: string\n): Promise<UnblindedOutput> {\n  try {\n    return unblindOutput(utxo, blindPrivKey);\n  } catch (_) {\n    throw new UnblindError(utxo.txid, utxo.vout, blindPrivKey);\n  }\n}\n\n/**\n * Reduce a set of transactions using a set of scripts\n * @param txs the wallet's transactions\n * @param walletScripts the set of scripts to use in order to filter tx's outputs\n * @param initialState initial utxos state (set in txs reducer) - optional (default: [])\n */\nexport function utxosFromTransactions(\n  txs: TxInterface[],\n  walletScripts: Set<string>,\n  initialState: (Output | UnblindedOutput)[] = []\n): (Output | UnblindedOutput)[] {\n  const orInfinity = (a?: number) => (a ? a : Infinity);\n  const compareBlockHeight = (a: TxInterface, b: TxInterface) =>\n    orInfinity(a.status.blockHeight) - orInfinity(b.status.blockHeight) || 0;\n  const compareVin = (a: TxInterface, b: TxInterface) =>\n    a.vin.map(i => i.txid).includes(b.txid) ? 1 : -1;\n  const compare = (a: TxInterface, b: TxInterface) =>\n    compareBlockHeight(a, b) || compareVin(a, b);\n  return txs\n    .sort(compare)\n    .reduce((utxoSet: (Output | UnblindedOutput)[], tx: TxInterface, _) => {\n      const withoutSpentUtxo = removeInputsFromUtxos(utxoSet, tx.vin);\n      return addOutputsToUtxos(withoutSpentUtxo, tx, walletScripts);\n    }, initialState);\n}\n\nfunction addOutputsToUtxos(\n  utxos: (Output | UnblindedOutput)[],\n  tx: TxInterface,\n  walletScripts: Set<string>\n) {\n  const isWalletOutput = (o: Output) =>\n    walletScripts.has(o.prevout.script.toString('hex'));\n  const walletOutputs = tx.vout.filter(isWalletOutput);\n  return utxos.concat(walletOutputs);\n}\n\nfunction removeInputsFromUtxos(utxoSet: Output[], inputs: InputInterface[]) {\n  let result = utxoSet;\n  for (const input of inputs) {\n    result = result.filter(\n      u => !(u.txid === input.txid && u.vout === input.vout)\n    );\n  }\n\n  return result;\n}\n","import { confidential } from 'liquidjs-lib';\nimport { BlindingKeyGetterAsync, TxInterface, UnblindedOutput } from '../types';\nimport { isConfidentialOutput } from '../utils';\nimport { ChainAPI } from './api';\nimport { unblindTransaction } from './transaction';\nimport { EsploraTx, EsploraUtxo } from './types';\nimport { tryToUnblindUtxo } from './utxos';\n\nexport async function* utxosFetchGenerator(\n  addresses: string[],\n  blindingKeyGetter: BlindingKeyGetterAsync,\n  api: ChainAPI,\n  skip?: (utxo: EsploraUtxo) => boolean\n): AsyncGenerator<\n  UnblindedOutput,\n  { numberOfUtxos: number; errors: Error[] },\n  undefined\n> {\n  let numberOfUtxos = 0;\n  const errors = [];\n  const utxos = await api.fetchUtxos(addresses, skip);\n  for (const utxo of utxos) {\n    try {\n      if (!isConfidentialOutput(utxo.prevout)) {\n        yield {\n          ...utxo,\n          unblindData: {\n            asset: utxo.prevout.asset.slice(1),\n            value: confidential\n              .confidentialValueToSatoshi(utxo.prevout.value)\n              .toString(10),\n            assetBlindingFactor: Buffer.alloc(32),\n            valueBlindingFactor: Buffer.alloc(32),\n          },\n        };\n      }\n\n      const privateBlindingKey = await blindingKeyGetter(\n        utxo.prevout.script.toString('hex')\n      );\n      if (!privateBlindingKey) {\n        // do not unblind, just skip and continue\n        continue;\n      }\n\n      const unblindedUtxo = await tryToUnblindUtxo(utxo, privateBlindingKey);\n      yield unblindedUtxo;\n      numberOfUtxos++;\n    } catch (err) {\n      console.log(err);\n      if (err instanceof Error) {\n        errors.push(err);\n      }\n\n      if (typeof err === 'string') {\n        errors.push(new Error(err));\n      }\n      errors.push(new Error('unknown error'));\n    }\n  }\n\n  return { numberOfUtxos, errors };\n}\n\nexport async function* txsFetchGenerator(\n  addresses: string[],\n  blindingKeyGetter: BlindingKeyGetterAsync,\n  api: ChainAPI,\n  skip?: (tx: EsploraTx) => boolean\n): AsyncGenerator<\n  TxInterface,\n  { txIDs: string[]; errors: Error[] },\n  undefined\n> {\n  const txIDs: string[] = [];\n  const errors: Error[] = [];\n  const transactions = await api.fetchTxs(addresses, skip);\n  for (const tx of transactions) {\n    try {\n      const { unblindedTx, errors: errs } = await unblindTransaction(\n        tx,\n        blindingKeyGetter\n      );\n      errors.push(...errs);\n      yield unblindedTx;\n\n      txIDs.push(tx.txid);\n    } catch (err) {\n      if (err instanceof Error) {\n        errors.push(err);\n      }\n\n      if (typeof err === 'string') {\n        errors.push(new Error(err));\n      }\n      errors.push(new Error('unknown error'));\n    }\n  }\n  return { txIDs, errors };\n}\n\nexport async function fetchAllTxs(\n  addresses: string[],\n  blindingKeyGetter: BlindingKeyGetterAsync,\n  api: ChainAPI,\n  skip?: (tx: EsploraTx) => boolean\n): Promise<TxInterface[]> {\n  const txs: TxInterface[] = [];\n  for await (const tx of txsFetchGenerator(\n    addresses,\n    blindingKeyGetter,\n    api,\n    skip\n  )) {\n    txs.push(tx);\n  }\n  return txs;\n}\n\nexport async function fetchAllUtxos(\n  addresses: string[],\n  blindingKeyGetter: BlindingKeyGetterAsync,\n  api: ChainAPI,\n  skip?: (utxo: EsploraUtxo) => boolean\n): Promise<UnblindedOutput[]> {\n  const utxos: UnblindedOutput[] = [];\n  for await (const utxo of utxosFetchGenerator(\n    addresses,\n    blindingKeyGetter,\n    api,\n    skip\n  )) {\n    utxos.push(utxo);\n  }\n  return utxos;\n}\n","import axios, { AxiosInstance } from 'axios';\nimport { Transaction, TxOutput } from 'liquidjs-lib';\nimport { InputInterface, Outpoint, Output, TxInterface } from '../types';\nimport { EsploraTx, EsploraUtxo } from './types';\n\nexport interface ChainAPI {\n  fetchUtxos(\n    addresses: string[],\n    skip?: (utxo: EsploraUtxo) => boolean\n  ): Promise<Output[]>;\n  fetchTxs(\n    addresses: string[],\n    skip?: (esploraTx: EsploraTx) => boolean\n  ): Promise<TxInterface[]>;\n  fetchTxsHex(txids: string[]): Promise<{ txid: string; hex: string }[]>;\n  addressesHasBeenUsed(addresses: string[]): Promise<boolean[]>;\n}\n\n/**\n * Esplora is the ChainAPI implmentation for regular esplora instance\n * Esplora also exports extra methods specific to esplora instance\n */\nexport class Electrs implements ChainAPI {\n  readonly electrsURL: string;\n  readonly axios: AxiosInstance;\n\n  constructor(url: string, axiosIns?: AxiosInstance) {\n    this.electrsURL = url;\n    this.axios = axiosIns ?? axios.create();\n  }\n\n  static fromURL(url: string): Electrs {\n    return new Electrs(url);\n  }\n\n  async addressesHasBeenUsed(addresses: string[]): Promise<boolean[]> {\n    const hasBeenUsed = async (address: string) => {\n      try {\n        const data = (\n          await axios.get(`${this.electrsURL}/address/${address}/txs`)\n        ).data;\n        return data.length > 0;\n      } catch (e) {\n        return false;\n      }\n    };\n    return Promise.all(addresses.map(hasBeenUsed));\n  }\n\n  async fetchUtxos(\n    addresses: string[],\n    skip?: (utxo: EsploraUtxo) => boolean\n  ): Promise<Output[]> {\n    const reqs = addresses.map(address =>\n      this.axios.get(`${this.electrsURL}/address/${address}/utxo`)\n    );\n    const responses = await Promise.allSettled(reqs);\n    const resolvedResponses = responses.map(r =>\n      r.status === 'fulfilled' ? r.value.data : []\n    );\n    const utxos = resolvedResponses.map(r => (r ? r : []));\n    return Promise.all(\n      utxos\n        .flat()\n        .filter((u: EsploraUtxo) => (skip ? !skip(u) : true))\n        .map(this.outpointToUtxo())\n    );\n  }\n\n  async fetchTxs(\n    addresses: string[],\n    skip?: (tx: EsploraTx) => boolean\n  ): Promise<TxInterface[]> {\n    const esploraTxs = await Promise.all(\n      addresses.map(this.fetchAllTxsForAddress())\n    );\n    const txs = esploraTxs\n      .flat()\n      .filter((tx: EsploraTx) => (skip ? !skip(tx) : true))\n      .map(esploraTxToTxInterface(ids => this.fetchTxsHex(ids)));\n    return Promise.all(txs);\n  }\n\n  async fetchTxHex(txid: string): Promise<string> {\n    const h = (await this.axios.get(`${this.electrsURL}/tx/${txid}/hex`)).data;\n    return h;\n  }\n\n  async fetchTxsHex(txids: string[]): Promise<{ txid: string; hex: string }[]> {\n    return Promise.all(\n      txids.map(async txid => ({ txid, hex: await this.fetchTxHex(txid) }))\n    );\n  }\n\n  async fetchTx(txid: string): Promise<TxInterface> {\n    return esploraTxToTxInterface(ids => this.fetchTxsHex(ids))(\n      (await this.axios.get(`${this.electrsURL}/tx/${txid}`)).data\n    );\n  }\n\n  private fetchAllTxsForAddress() {\n    return async (address: string): Promise<EsploraTx[]> => {\n      let lastSeenTxid = undefined;\n      const txs = [];\n      do {\n        // fetch up to 25 txs\n        const nextTxs: EsploraTx[] = await this.fetch25newestTxsForAddress(\n          address,\n          lastSeenTxid\n        );\n\n        if (nextTxs.length === 0) break;\n        txs.push(...nextTxs);\n        if (nextTxs.length < 25) break;\n        lastSeenTxid = nextTxs[nextTxs.length - 1].txid;\n      } while (lastSeenTxid);\n      return txs;\n    };\n  }\n\n  private async fetch25newestTxsForAddress(\n    address: string,\n    lastSeenTxid?: string\n  ): Promise<EsploraTx[]> {\n    let url = `${this.electrsURL}/address/${address}/txs/chain`;\n    if (lastSeenTxid) {\n      url += `/${lastSeenTxid}`;\n    }\n\n    const response = await this.axios.get(url);\n    return response.data;\n  }\n\n  protected outpointToUtxo() {\n    return async (outpoint: Outpoint): Promise<Output> => {\n      const prevoutHex = await this.fetchTxHex(outpoint.txid);\n      const prevout = Transaction.fromHex(prevoutHex).outs[outpoint.vout];\n      return { ...outpoint, prevout };\n    };\n  }\n}\n\n// https://electrs-batch-server.vulpem.com/\nexport class ElectrsBatchServer extends Electrs implements ChainAPI {\n  constructor(\n    readonly batchServerURL: string,\n    readonly electrsURL: string,\n    axiosIns?: AxiosInstance\n  ) {\n    super(electrsURL, axiosIns);\n  }\n\n  static fromURL(_: string): ElectrsBatchServer {\n    throw new Error(\n      'Not implemented: use Electrs.fromURL or ElectrsBatchServer.fromURLs instead'\n    );\n  }\n\n  static fromURLs(url: string, electrsUrl: string): ElectrsBatchServer {\n    return new ElectrsBatchServer(url, electrsUrl);\n  }\n\n  async addressesHasBeenUsed(addresses: string[]): Promise<boolean[]> {\n    const response = await this.axios.post(\n      `${this.batchServerURL}/addresses/transactions`,\n      { addresses }\n    );\n    const results = [];\n    for (const { transaction } of response.data) {\n      results.push(transaction.length > 0);\n    }\n    return results;\n  }\n\n  async fetchUtxos(\n    addresses: string[],\n    skip?: (utxo: EsploraUtxo) => boolean\n  ): Promise<Output[]> {\n    const response = await this.axios.post(\n      `${this.batchServerURL}/addresses/utxo`,\n      { addresses }\n    );\n    if (response.status !== 200) {\n      throw new Error(`Error fetching utxos: ${response.status}`);\n    }\n\n    if (!response.data || !Array.isArray(response.data)) {\n      throw new Error('Invalid response from batch server');\n    }\n\n    const utxos = [];\n    for (const { utxo } of response.data) {\n      if (!Array.isArray(utxo)) continue;\n      if (utxo.length === 0) continue;\n      utxos.push(...utxo);\n    }\n\n    return await Promise.all(\n      utxos\n        .filter((u: EsploraUtxo) => (skip ? !skip(u) : true))\n        .map(super.outpointToUtxo())\n    );\n  }\n\n  async fetchTxsHex(txids: string[]): Promise<{ txid: string; hex: string }[]> {\n    const response = await this.axios.post(\n      `${this.batchServerURL}/transactions/hex`,\n      { txids }\n    );\n    return response.data || [];\n  }\n\n  async fetchTxs(\n    addresses: string[],\n    skip?: (tx: EsploraTx) => boolean\n  ): Promise<TxInterface[]> {\n    const response = await this.axios.post(\n      `${this.batchServerURL}/addresses/transactions`,\n      { addresses }\n    );\n    const promises = [];\n\n    for (const { transaction } of response.data) {\n      if (transaction.length === 0) continue;\n      promises.push(\n        ...transaction\n          .filter((tx: EsploraTx) => (skip ? !skip(tx) : true))\n          .map(esploraTxToTxInterface(ids => this.fetchTxsHex(ids)))\n      );\n    }\n    return Promise.all(promises);\n  }\n}\n\n// util function for output mapping\nfunction makeOutput(outpoint: Outpoint, txOutput: TxOutput): Output {\n  return {\n    ...outpoint,\n    prevout: txOutput,\n  };\n}\n\nfunction esploraTxToTxInterface(\n  fetchTxFn: (txIDs: string[]) => Promise<{ txid: string; hex: string }[]>\n) {\n  return async (esploraTx: EsploraTx): Promise<TxInterface> => {\n    // make an unique call to the api to fetch all the transaction needed\n    // prevouts transactions (except pegin) + the current transaction\n    const transactions = await fetchTxFn([\n      ...esploraTx.vin.filter(input => !input.is_pegin).map(i => i.txid),\n      esploraTx.txid,\n    ]);\n\n    const makePrevout = ({ txid, vout }: Outpoint): Output => {\n      const hex = transactions?.find(t => t.txid === txid);\n      if (!hex) throw new Error(`Could not find tx ${txid}`);\n      const prevout = Transaction.fromHex(hex.hex).outs[vout];\n      return makeOutput({ txid, vout }, prevout);\n    };\n\n    const txInputs: InputInterface[] = esploraTx.vin.map(input => ({\n      prevout: input.is_pegin ? undefined : makePrevout(input),\n      txid: input.txid,\n      vout: input.vout,\n      isPegin: input.is_pegin,\n    }));\n\n    const txHex = transactions?.find(t => t.txid === esploraTx.txid)?.hex;\n    if (!txHex) throw new Error(`Could not find tx ${esploraTx.txid}`);\n    const transaction = Transaction.fromHex(txHex);\n\n    const makeOutpoint = (index: number): Outpoint => ({\n      txid: esploraTx.txid,\n      vout: index,\n    });\n\n    const makeOutputFromTxout = (txout: TxOutput, index: number): Output =>\n      makeOutput(makeOutpoint(index), txout);\n    const txOutputs = transaction.outs.map(makeOutputFromTxout);\n\n    const tx: TxInterface = {\n      txid: esploraTx.txid,\n      vin: txInputs,\n      vout: txOutputs,\n      fee: esploraTx.fee,\n      status: {\n        confirmed: esploraTx.status.confirmed,\n        blockHash: esploraTx.status.block_hash,\n        blockHeight: esploraTx.status.block_height,\n        blockTime: esploraTx.status.block_time,\n      },\n    };\n\n    return tx;\n  };\n}\n","import {\n  CoinSelectionResult,\n  CoinSelector,\n} from './coinselection/coinSelector';\nimport {\n  ChangeAddressFromAssetGetter,\n  RecipientInterface,\n  UnblindedOutput,\n  Output,\n  CoinSelectorErrorFn,\n} from './types';\nimport {\n  Psbt,\n  address as laddress,\n  AssetHash,\n  confidential,\n} from 'liquidjs-lib';\nimport { checkCoinSelect, throwErrorHandler } from './coinselection/utils';\nimport { decodePset } from './utils';\n\nexport function craftSingleRecipientPset(\n  unspents: UnblindedOutput[],\n  recipient: RecipientInterface,\n  coinSelector: CoinSelector,\n  changeAddressByAsset: ChangeAddressFromAssetGetter,\n  substractFeeFromRecipient = false,\n  satsPerByte = DEFAULT_SATS_PER_BYTE\n) {\n  const network = laddress.getNetwork(recipient.address);\n  const substractScenario =\n    substractFeeFromRecipient && recipient.asset === network.assetHash;\n\n  const firstSelection = coinSelector(throwErrorHandler)(\n    unspents,\n    [recipient],\n    changeAddressByAsset\n  );\n\n  const fee = createFeeOutput(\n    firstSelection.selectedUtxos.length,\n    // Change outputs + 1 recipient + 1 fee\n    firstSelection.changeOutputs.length + 2,\n    satsPerByte,\n    network.assetHash\n  );\n\n  let errorHandler: CoinSelectorErrorFn = throwErrorHandler;\n  if (substractScenario) {\n    errorHandler = (asset: string, need: number, has: number) => {\n      if (asset === recipient.asset) {\n        recipient.value = has - fee.value;\n        return;\n      } // do not throw error if not enougt fund with recipient's asset.\n      throwErrorHandler(asset, need, has);\n    };\n  }\n\n  const { selectedUtxos, changeOutputs } = coinSelector(errorHandler)(\n    unspents,\n    [recipient, fee],\n    changeAddressByAsset\n  );\n\n  const outs = [recipient, ...changeOutputs, fee];\n  checkCoinSelect(outs)(selectedUtxos);\n\n  return addToTx(new Psbt({ network }).toBase64(), selectedUtxos, outs);\n}\n\nexport interface BuildTxArgs {\n  psetBase64: string;\n  unspents: UnblindedOutput[];\n  recipients: RecipientInterface[];\n  coinSelector: CoinSelector;\n  changeAddressByAsset: ChangeAddressFromAssetGetter;\n  addFee?: boolean;\n  satsPerByte?: number;\n  errorHandler?: CoinSelectorErrorFn;\n}\n\nexport const DEFAULT_SATS_PER_BYTE = 0.1;\n\nfunction validateAndProcess(args: BuildTxArgs): BuildTxArgs {\n  if (!args.satsPerByte) {\n    args.satsPerByte = DEFAULT_SATS_PER_BYTE;\n  }\n\n  if (!args.errorHandler) {\n    args.errorHandler = throwErrorHandler;\n  }\n\n  if (!args.addFee) {\n    args.addFee = false;\n  }\n\n  if (args.addFee && args.satsPerByte < 0.1) {\n    throw new Error('satsPerByte minimum value is 0.1');\n  }\n\n  if (args.recipients.length === 0) {\n    throw new Error(\n      'need a least one recipient output to build the transaction'\n    );\n  }\n\n  if (args.unspents.length === 0) {\n    throw new Error('need at least one unspent to fund the transaction');\n  }\n\n  return args;\n}\n\n/**\n * buildTx selects utxos among unspents to fill outputs' requirements,\n * then it adds the associated inputs and outputs to the tx.\n * finally it returns the new pset base64 encoded.\n * @param args buildTxArgs wraps arguments\n */\nexport function craftMultipleRecipientsPset(args: BuildTxArgs): string {\n  // validate and deconstruct args object\n  const {\n    changeAddressByAsset,\n    coinSelector,\n    psetBase64,\n    recipients,\n    unspents,\n    addFee,\n    satsPerByte,\n    errorHandler,\n  } = validateAndProcess(args);\n\n  const firstSelection = coinSelector(errorHandler!)(\n    unspents,\n    recipients,\n    changeAddressByAsset\n  );\n\n  // if not fee, just add selected unspents as inputs and specified outputs + change outputs to pset\n  if (!addFee) {\n    const outs = recipients.concat(firstSelection.changeOutputs);\n    checkCoinSelect(outs)(firstSelection.selectedUtxos);\n    return addToTx(psetBase64, firstSelection.selectedUtxos, outs);\n  }\n\n  // otherwise, handle the fee output\n  const fee = createFeeOutputFromPset(\n    psetBase64,\n    firstSelection,\n    recipients,\n    satsPerByte\n  );\n  const { changeOutputs, selectedUtxos } = coinSelector(errorHandler!)(\n    unspents,\n    [...recipients, fee],\n    changeAddressByAsset\n  );\n\n  const outs = [...recipients, ...changeOutputs, fee];\n\n  // check that input amount = output amount and input assets = output assets\n  checkCoinSelect(outs)(selectedUtxos);\n\n  return addToTx(psetBase64, selectedUtxos, outs);\n}\n\nfunction createFeeOutputFromPset(\n  psetBase64: string,\n  firstSelection: CoinSelectionResult,\n  recipients: RecipientInterface[],\n  satsPerByte: number | undefined\n) {\n  const pset = decodePset(psetBase64);\n  const nbInputs =\n    pset.data.inputs.length + firstSelection.selectedUtxos.length + 1;\n  let nbOutputs =\n    pset.data.outputs.length +\n    recipients.length +\n    firstSelection.changeOutputs.length +\n    1;\n\n  const feeAssetHash = laddress.getNetwork(recipients[0].address).assetHash;\n  const fee = createFeeOutput(nbInputs, nbOutputs, satsPerByte!, feeAssetHash);\n  return fee;\n}\n\n// this function create a recipient interface for Fee output using tx size estimation\nexport function createFeeOutput(\n  numInputs: number,\n  numOutputs: number,\n  satsPerByte: number,\n  assetHash: string\n): RecipientInterface {\n  const sizeEstimation = estimateTxSize(numInputs, numOutputs);\n  const feeEstimation = Math.ceil(sizeEstimation * satsPerByte);\n\n  return {\n    asset: assetHash,\n    value: feeEstimation,\n    address: '',\n  };\n}\n\nexport function addToTx(\n  psetBase64: string,\n  unspents: Output[],\n  recipients: RecipientInterface[]\n): string {\n  const pset = decodePset(psetBase64);\n  const nonce = Buffer.alloc(1);\n\n  for (const { asset, value, address } of recipients) {\n    const script =\n      address === '' ? Buffer.alloc(0) : laddress.toOutputScript(address);\n    pset.addOutput({\n      asset: AssetHash.fromHex(asset, false).bytes,\n      value: confidential.satoshiToConfidentialValue(value),\n      script,\n      nonce,\n    });\n  }\n\n  for (const unspent of unspents) {\n    pset.addInput({\n      hash: unspent.txid,\n      index: unspent.vout,\n      witnessUtxo: unspent.prevout,\n    });\n  }\n\n  return pset.toBase64();\n}\n\n// estimate segwit transaction size in bytes depending on number of inputs and outputs\nexport function estimateTxSize(numInputs: number, numOutputs: number): number {\n  const base = calcTxSize(false, numInputs, numOutputs, false);\n  const total = calcTxSize(true, numInputs, numOutputs, true);\n  const weight = base * 3 + total;\n  const vsize = (weight + 3) / 4;\n\n  return vsize;\n}\n\nfunction calcTxSize(\n  withWitness: boolean,\n  numInputs: number,\n  numOutputs: number,\n  isConfidential: boolean\n) {\n  const inputsSize = calcInputsSize(withWitness, numInputs);\n  const outputsSize = calcOutputsSize(isConfidential, numOutputs);\n\n  return (\n    9 +\n    varIntSerializeSize(numOutputs) +\n    varIntSerializeSize(numInputs) +\n    inputsSize +\n    outputsSize\n  );\n}\n\nfunction calcInputsSize(withWitness: boolean, numInputs: number): number {\n  // prevout hash + prevout index\n  let size = (32 + 8) * numInputs;\n  if (withWitness) {\n    // scriptsig + pubkey\n    size += numInputs * (72 + 33);\n  }\n\n  return size;\n}\n\nfunction calcOutputsSize(isConfidential: boolean, numOutputs: number): number {\n  // asset + value + empty nonce\n  const baseOutputSize = 33 + 33 + 1;\n  let size = baseOutputSize * numOutputs;\n\n  if (isConfidential) {\n    // rangeproof + surjectionproof + 32 bytes for nonce\n    size += (4174 + 67 + 32) * numOutputs;\n  }\n\n  // fee asset + fee empty nonce + fee value\n  size += 33 + 1 + 9;\n\n  return size;\n}\n\nfunction varIntSerializeSize(val: number): number {\n  const maxUINT16 = 65535;\n  const maxUINT32 = 4294967295;\n\n  if (val < 0xfd) {\n    return 1;\n  }\n\n  if (val <= maxUINT16) {\n    return 3;\n  }\n\n  if (val <= maxUINT32) {\n    return 5;\n  }\n\n  return 9;\n}\n","import { Psbt } from 'liquidjs-lib';\nimport { CoinSelector } from './coinselection/coinSelector';\nimport {\n  AddressInterface,\n  RecipientInterface,\n  ChangeAddressFromAssetGetter,\n  NetworkString,\n  UnblindedOutput,\n} from './types';\nimport { getNetwork } from './utils';\nimport {\n  craftMultipleRecipientsPset,\n  BuildTxArgs,\n  DEFAULT_SATS_PER_BYTE,\n  craftSingleRecipientPset,\n} from './transaction';\nimport { fetchAndUnblindUtxos } from './explorer/utxos';\nimport { Network } from 'liquidjs-lib/src/networks';\nimport { TinySecp256k1Interface } from 'ecpair';\n\n/**\n * Wallet abstraction.\n */\nexport interface WalletInterface {\n  network: Network;\n  createTx(): string;\n  buildTx(\n    psetBase64: string,\n    recipients: RecipientInterface[],\n    coinSelector: CoinSelector,\n    changeAddressByAsset: ChangeAddressFromAssetGetter,\n    addFee?: boolean,\n    satsPerByte?: number\n  ): string;\n  sendTx(\n    recipient: RecipientInterface,\n    coinSelector: CoinSelector,\n    changeAddressByAsset: ChangeAddressFromAssetGetter,\n    substractFee?: boolean,\n    satsPerByte?: number\n  ): string;\n}\n\n/**\n * Implementation of Wallet Interface.\n * @member network type of network (regtest...)\n * @member addresses list of AddressInterface.\n * @method createTx init empty PSET.\n * @method updateTx update a PSET with outputs and inputs (for Swap tx).\n */\nexport class Wallet implements WalletInterface {\n  network: Network;\n  unspents: UnblindedOutput[];\n\n  constructor(unspents: UnblindedOutput[], network: Network) {\n    this.network = network;\n    this.unspents = unspents;\n  }\n\n  /**\n   * Returns an empty liquidjs lib Psbt instance.\n   */\n  createTx(): string {\n    const pset = new Psbt({ network: this.network });\n    return pset.toBase64();\n  }\n\n  buildTx(\n    psetBase64: string,\n    recipients: RecipientInterface[],\n    coinSelector: CoinSelector,\n    changeAddressByAsset: ChangeAddressFromAssetGetter,\n    addFee?: boolean,\n    satsPerByte?: number\n  ): string {\n    const args: BuildTxArgs = {\n      psetBase64,\n      recipients,\n      coinSelector,\n      changeAddressByAsset,\n      addFee,\n      satsPerByte,\n      unspents: this.unspents,\n    };\n\n    return craftMultipleRecipientsPset(args);\n  }\n\n  sendTx(\n    recipient: RecipientInterface,\n    coinSelector: CoinSelector,\n    changeAddressByAsset: ChangeAddressFromAssetGetter,\n    substractFee = false,\n    satsPerByte = DEFAULT_SATS_PER_BYTE\n  ) {\n    return craftSingleRecipientPset(\n      this.unspents,\n      recipient,\n      coinSelector,\n      changeAddressByAsset,\n      substractFee,\n      satsPerByte\n    );\n  }\n}\n\n/**\n * Factory: list of addresses --to--> Wallet\n * @param addresses a list of addressInterface.\n * @param explorerUrl the esplora endpoint used to fetch addresses's utxos\n * @param network network type\n */\nexport async function walletFromAddresses(\n  ecclib: TinySecp256k1Interface,\n  addresses: AddressInterface[],\n  explorerUrl: string,\n  network?: NetworkString\n): Promise<WalletInterface> {\n  const utxos = await fetchAndUnblindUtxos(ecclib, addresses, explorerUrl);\n  return walletFromCoins(utxos, network);\n}\n\nexport function walletFromCoins(\n  coins: UnblindedOutput[],\n  network?: NetworkString\n): WalletInterface {\n  return new Wallet(coins, getNetwork(network));\n}\n","import { getAsset, Output, getSats } from './types';\nimport { groupBy } from './utils';\n\n/**\n * reduces the set of unspents in order to compute sats grouped by assets.\n * @param unspents the utxos to reduce\n */\nexport function balances(unspents: Output[]): Record<string, number> {\n  const unspentsByAsset = groupBy<Output>(unspents, getAsset);\n  const balances: Record<string, number> = {};\n\n  for (const [asset, utxos] of Object.entries(unspentsByAsset)) {\n    balances[asset] = sumSats(utxos);\n  }\n\n  return balances;\n}\n\nfunction sumSats(unspents: Output[]): number {\n  return unspents.reduce((acc, utxo) => acc + getSats(utxo), 0);\n}\n","import { confidential, address } from 'liquidjs-lib';\nimport { UnblindedOutput } from './types';\nimport { isConfidentialOutput, psetToUnsignedTx } from './utils';\n\n/**\n * iterates through pset's inputs and try to find the prevout blinders.\n * @param pset the unsigned pset to blind\n * @param utxos a set of coins (should contain all the pset prevouts to build the whole map)\n * @returns a map inputIndex => blinders data which can be used as input of blindOutputByIndex.\n */\nexport function inputBlindingDataMap(\n  pset: string,\n  utxos: UnblindedOutput[]\n): Map<number, confidential.UnblindOutputResult> {\n  const inputBlindingData = new Map<number, confidential.UnblindOutputResult>();\n  const txidToBuffer = function(txid: string) {\n    return Buffer.from(txid, 'hex').reverse();\n  };\n\n  let index = -1;\n  for (const input of psetToUnsignedTx(pset).ins) {\n    index++;\n    const utxo = utxos.find(\n      u => txidToBuffer(u.txid).equals(input.hash) && u.vout === input.index\n    );\n\n    // only add unblind data if the prevout of the input is confidential\n    if (utxo && utxo.unblindData && isConfidentialOutput(utxo.prevout)) {\n      inputBlindingData.set(index, utxo.unblindData);\n    }\n  }\n\n  return inputBlindingData;\n}\n\n/**\n * find the blinding public key associated with output script using a set of addresses.\n * @param pset the unsigned pset to blind\n * @param outputAddresses a set of addresses used to craft the pset outputs.\n * @returns the blinding public mapped to output index. Can be used as input in blindOutputByIndex.\n */\nexport function outputBlindingPubkeysMap(\n  pset: string,\n  outputAddresses: string[]\n): Map<number, Buffer> {\n  const outPubkeys: Map<number, Buffer> = new Map();\n\n  for (const outAddress of outputAddresses) {\n    const index = outputIndexFromAddress(pset, outAddress);\n    if (index === -1) continue;\n    if (isConfidentialAddress(outAddress)) {\n      outPubkeys.set(index, blindingKeyFromAddress(outAddress));\n    }\n  }\n\n  return outPubkeys;\n}\n\nfunction outputIndexFromAddress(tx: string, addressToFind: string): number {\n  const utx = psetToUnsignedTx(tx);\n  const recipientScript = address.toOutputScript(addressToFind);\n  return utx.outs.findIndex(out => out.script.equals(recipientScript));\n}\n\nfunction isConfidentialAddress(addr: string): boolean {\n  try {\n    address.fromConfidential(addr);\n    return true;\n  } catch (ignore) {\n    return false;\n  }\n}\n\nfunction blindingKeyFromAddress(addr: string): Buffer {\n  return address.fromConfidential(addr).blindingKey;\n}\n","import axios from 'axios';\nimport { IdentityInterface } from '../identity/identity';\nimport { Multisig } from '../identity/multisig';\nimport { MultisigWatchOnly } from '../identity/multisigWatchOnly';\nimport { MasterPublicKey } from './../identity/masterpubkey';\nimport { Mnemonic } from './../identity/mnemonic';\nimport { Restorer } from './restorer';\n\n// from Esplora\n\nexport const BLOCKSTREAM_ESPLORA_ENDPOINT =\n  'https://blockstream.info/liquid/api';\n\nexport interface EsploraRestorerOpts {\n  esploraURL: string;\n  gapLimit: number;\n}\n\nexport function restorerFromEsplora<R extends IdentityInterface>(\n  identity: R,\n  getAddress: (isChange: boolean, index: number) => string\n): Restorer<EsploraRestorerOpts, R> {\n  return async ({\n    esploraURL = BLOCKSTREAM_ESPLORA_ENDPOINT,\n    gapLimit = 20,\n  }) => {\n    const restoreFunc = async function(\n      getAddrFunc: (index: number) => Promise<string>\n    ): Promise<number | undefined> {\n      let counter = 0;\n      let next = 0;\n      let maxIndex: number | undefined = undefined;\n\n      while (counter < gapLimit) {\n        const cpyNext = next;\n        // generate a set of addresses from next to (next + gapLimit - 1)\n        const addrs = await Promise.all(\n          Array.from(Array(gapLimit).keys())\n            .map(i => i + cpyNext)\n            .map(getAddrFunc)\n        );\n\n        const hasBeenUsedArray = await Promise.all(\n          addrs.map(a => addressHasBeenUsed(a, esploraURL))\n        );\n\n        let indexInArray = 0;\n        for (const hasBeenUsed of hasBeenUsedArray) {\n          if (hasBeenUsed) {\n            maxIndex = indexInArray + next;\n            counter = 0;\n          } else {\n            counter++;\n            if (counter === gapLimit) return maxIndex; // duplicate the stop condition\n          }\n          indexInArray++;\n        }\n\n        next += gapLimit; // increase next\n      }\n\n      return maxIndex;\n    };\n\n    const restorerExternal = restoreFunc((index: number) => {\n      return Promise.resolve(getAddress(false, index));\n    });\n\n    const restorerInternal = restoreFunc((index: number) => {\n      return Promise.resolve(getAddress(true, index));\n    });\n\n    const [lastUsedExternalIndex, lastUsedInternalIndex] = await Promise.all([\n      restorerExternal,\n      restorerInternal,\n    ]);\n\n    return restorerFromState(identity)({\n      lastUsedExternalIndex,\n      lastUsedInternalIndex,\n    });\n  };\n}\n\nasync function addressHasBeenUsed(\n  address: string,\n  esploraURL: string\n): Promise<boolean> {\n  try {\n    const data = (await axios.get(`${esploraURL}/address/${address}/txs`)).data;\n    return data.length > 0;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * build an async esplora restorer for a specific mnemonic\n * @param mnemonicToRestore\n */\nexport function mnemonicRestorerFromEsplora(mnemonicToRestore: Mnemonic) {\n  return restorerFromEsplora<Mnemonic>(\n    mnemonicToRestore,\n    (isChange, index) =>\n      mnemonicToRestore.getAddress(isChange, index).address.confidentialAddress\n  );\n}\n\n/**\n * build an async esplora restorer for a specific masterPubKey\n * @param toRestore\n */\nexport function masterPubKeyRestorerFromEsplora(toRestore: MasterPublicKey) {\n  return restorerFromEsplora<MasterPublicKey>(\n    toRestore,\n    (isChange, index) =>\n      toRestore.getAddress(isChange, index).address.confidentialAddress\n  );\n}\n\n/**\n * build an async esplora restorer for a MultisigWatchOnly\n * @param toRestore\n */\nexport function multisigWatchOnlyFromEsplora(toRestore: MultisigWatchOnly) {\n  return restorerFromEsplora<MultisigWatchOnly>(\n    toRestore,\n    (isChange, index) =>\n      toRestore.getMultisigAddress(\n        isChange\n          ? MultisigWatchOnly.INTERNAL_INDEX\n          : MultisigWatchOnly.EXTERNAL_INDEX,\n        index\n      ).confidentialAddress\n  );\n}\n\n/**\n * build an async esplora restorer for a Multisig\n * @param toRestore\n */\nexport function multisigFromEsplora(toRestore: Multisig) {\n  return restorerFromEsplora<Multisig>(\n    toRestore,\n    (isChange, index) =>\n      toRestore.getMultisigAddress(\n        isChange\n          ? MultisigWatchOnly.INTERNAL_INDEX\n          : MultisigWatchOnly.EXTERNAL_INDEX,\n        index\n      ).confidentialAddress\n  );\n}\n\n// From state\n\nexport interface StateRestorerOpts {\n  lastUsedExternalIndex?: number;\n  lastUsedInternalIndex?: number;\n}\n\nexport function restorerFromState<R extends IdentityInterface>(\n  identity: R\n): Restorer<StateRestorerOpts, R> {\n  return async ({ lastUsedExternalIndex, lastUsedInternalIndex }) => {\n    const promises = [];\n\n    if (lastUsedExternalIndex !== undefined) {\n      for (let i = 0; i <= lastUsedExternalIndex; i++) {\n        const promise = identity.getNextAddress();\n        promises.push(promise);\n      }\n    }\n\n    if (lastUsedInternalIndex !== undefined) {\n      for (let i = 0; i <= lastUsedInternalIndex; i++) {\n        const promise = identity.getNextChangeAddress();\n        promises.push(promise);\n      }\n    }\n\n    await Promise.all(promises);\n\n    return identity;\n  };\n}\n\n/**\n * create a restorer from state for a given mnemonic\n * @param toRestore\n */\nexport function mnemonicRestorerFromState(toRestore: Mnemonic) {\n  return restorerFromState<Mnemonic>(toRestore);\n}\n\n/**\n * create a restorer from state for a given mnemonic\n * @param toRestore\n */\nexport function masterPubKeyRestorerFromState(toRestore: MasterPublicKey) {\n  return restorerFromState<MasterPublicKey>(toRestore);\n}\n","import { ChainAPI } from '../explorer/api';\nimport { IdentityInterface } from '../identity/identity';\nimport { Mnemonic } from '../identity/mnemonic';\nimport { restorerFromState } from './mnemonic-restorer';\nimport { Restorer } from './restorer';\n\nfunction makeRestorerFromChainAPI<T extends IdentityInterface>(\n  id: T,\n  getAddress: (isChange: boolean, index: number) => string\n): Restorer<{ api: ChainAPI; gapLimit: number }, IdentityInterface> {\n  return async ({ gapLimit, api }) => {\n    const restoreFunc = async function(\n      getAddrFunc: (index: number) => Promise<string>\n    ): Promise<number | undefined> {\n      let counter = 0;\n      let next = 0;\n      let maxIndex: number | undefined = undefined;\n\n      while (counter < gapLimit) {\n        const cpyNext = next;\n        // generate a set of addresses from next to (next + gapLimit - 1)\n        const addrs = await Promise.all(\n          Array.from(Array(gapLimit).keys())\n            .map(i => i + cpyNext)\n            .map(getAddrFunc)\n        );\n\n        const hasBeenUsedArray = await api.addressesHasBeenUsed(addrs);\n\n        let indexInArray = 0;\n        for (const hasBeenUsed of hasBeenUsedArray) {\n          if (hasBeenUsed) {\n            maxIndex = indexInArray + next;\n            counter = 0;\n          } else {\n            counter++;\n            if (counter === gapLimit) return maxIndex; // duplicate the stop condition\n          }\n          indexInArray++;\n        }\n\n        next += gapLimit; // increase next\n      }\n\n      return maxIndex;\n    };\n    const restorerExternal = restoreFunc((index: number) => {\n      return Promise.resolve(getAddress(false, index));\n    });\n\n    const restorerInternal = restoreFunc((index: number) => {\n      return Promise.resolve(getAddress(true, index));\n    });\n\n    const [lastUsedExternalIndex, lastUsedInternalIndex] = await Promise.all([\n      restorerExternal,\n      restorerInternal,\n    ]);\n\n    return restorerFromState(id)({\n      lastUsedExternalIndex,\n      lastUsedInternalIndex,\n    });\n  };\n}\n\nexport function mnemonicRestorerFromChain(mnemonicToRestore: Mnemonic) {\n  return makeRestorerFromChainAPI<Mnemonic>(\n    mnemonicToRestore,\n    (isChange, index) =>\n      mnemonicToRestore.getAddress(isChange, index).address.confidentialAddress\n  );\n}\n","import { script } from 'liquidjs-lib';\nimport { bip341 } from 'liquidjs-lib';\n\n// analyse a script to know what it need as input\nconst { OPS } = script;\n\ninterface SignatureNeed {\n  pubkey: string;\n}\n\n/**\n * Script input need is the object representing the need of inputs for a script\n * The current version can be improved: now it doesn't take into account the order of the inputs\n * `sigs` describes the need of signatures\n * `introspection` is a boolean indicating if the script contains any introspection opcodes\n * `needParameters` is a boolean indicating if the script needs parameters extra parameter (excluding CHECKSIG)\n */\nexport interface ScriptInputsNeeds {\n  sigs: SignatureNeed[];\n  hasIntrospection: boolean;\n  needParameters: boolean;\n}\n\nconst NEED_PARAMS_OPCODES = [\n  OPS.OP_PUSHDATA1,\n  OPS.OP_PUSHDATA2,\n  OPS.OP_PUSHDATA4,\n  OPS.OP_1NEGATE,\n  OPS.OP_RESERVED,\n  OPS.OP_IF,\n  OPS.OP_VERIF,\n  OPS.OP_VERNOTIF,\n  OPS.OP_ELSE,\n  OPS.OP_ENDIF,\n  OPS.OP_VERIFY,\n  OPS.OP_TOALTSTACK,\n  OPS.OP_FROMALTSTACK,\n  OPS.OP_2DROP,\n  OPS.OP_2DUP,\n  OPS.OP_3DUP,\n  OPS.OP_2OVER,\n  OPS.OP_2ROT,\n  OPS.OP_2SWAP,\n  OPS.OP_NIP,\n  OPS.OP_OVER,\n  OPS.OP_PICK,\n  OPS.OP_ROLL,\n  OPS.OP_ROT,\n  OPS.OP_SWAP,\n  OPS.OP_TUCK,\n  OPS.OP_CAT,\n  OPS.OP_SUBSTR,\n  OPS.OP_SUBSTR_LAZY,\n  OPS.OP_LEFT,\n  OPS.OP_RIGHT,\n  OPS.OP_SIZE,\n  OPS.OP_INVERT,\n  OPS.OP_AND,\n  OPS.OP_OR,\n  OPS.OP_XOR,\n  OPS.OP_EQUAL,\n  OPS.OP_EQUALVERIFY,\n  OPS.OP_RESERVED1,\n  OPS.OP_RESERVED2,\n  OPS.OP_1ADD,\n  OPS.OP_1SUB,\n  OPS.OP_2MUL,\n  OPS.OP_2DIV,\n  OPS.OP_NEGATE,\n  OPS.OP_ABS,\n  OPS.OP_NOT,\n  OPS.OP_0NOTEQUAL,\n  OPS.OP_ADD,\n  OPS.OP_SUB,\n  OPS.OP_MUL,\n  OPS.OP_DIV,\n  OPS.OP_MOD,\n  OPS.OP_LSHIFT,\n  OPS.OP_RSHIFT,\n  OPS.OP_BOOLAND,\n  OPS.OP_BOOLOR,\n  OPS.OP_NUMEQUAL,\n  OPS.OP_NUMEQUALVERIFY,\n  OPS.OP_NUMNOTEQUAL,\n  OPS.OP_LESSTHAN,\n  OPS.OP_GREATERTHAN,\n  OPS.OP_LESSTHANOREQUAL,\n  OPS.OP_GREATERTHANOREQUAL,\n  OPS.OP_MIN,\n  OPS.OP_MAX,\n  OPS.OP_WITHIN,\n  OPS.OP_RIPEMD160,\n  OPS.OP_SHA1,\n  OPS.OP_SHA256,\n  OPS.OP_HASH160,\n  OPS.OP_HASH256,\n  OPS.OP_CODESEPARATOR,\n  OPS.OP_CHECKMULTISIG,\n  OPS.OP_CHECKMULTISIGVERIFY,\n  OPS.OP_DETERMINISTICRANDOM,\n  OPS.OP_SHA256INITIALIZE,\n  OPS.OP_SHA256UPDATE,\n  OPS.OP_SHA256FINALIZE,\n  OPS.OP_ADD64,\n  OPS.OP_SUB64,\n  OPS.OP_MUL64,\n  OPS.OP_DIV64,\n  OPS.OP_NEG64,\n  OPS.OP_LESSTHAN64,\n  OPS.OP_LESSTHANOREQUAL64,\n  OPS.OP_GREATERTHAN64,\n  OPS.OP_GREATERTHANOREQUAL64,\n  OPS.OP_SCRIPTNUMTOLE64,\n  OPS.OP_LE64TOSCRIPTNUM,\n  OPS.OP_LE32TOLE64,\n  OPS.OP_ECMULSCALARVERIFY,\n  OPS.OP_TWEAKVERIFY,\n  OPS.OP_PUBKEYHASH,\n  OPS.OP_PUBKEY,\n  OPS.OP_INVALIDOPCODE,\n];\n\nconst INTROSPECTION_OPCODES = [\n  OPS.OP_INSPECTINPUTOUTPOINT,\n  OPS.OP_INSPECTINPUTASSET,\n  OPS.OP_INSPECTINPUTVALUE,\n  OPS.OP_INSPECTINPUTSCRIPTPUBKEY,\n  OPS.OP_INSPECTINPUTSEQUENCE,\n  OPS.OP_INSPECTINPUTISSUANCE,\n  OPS.OP_PUSHCURRENTINPUTINDEX,\n  OPS.OP_INSPECTOUTPUTASSET,\n  OPS.OP_INSPECTOUTPUTVALUE,\n  OPS.OP_INSPECTOUTPUTNONCE,\n  OPS.OP_INSPECTOUTPUTSCRIPTPUBKEY,\n  OPS.OP_INSPECTVERSION,\n  OPS.OP_INSPECTLOCKTIME,\n  OPS.OP_INSPECTNUMINPUTS,\n  OPS.OP_INSPECTNUMOUTPUTS,\n];\n\ntype NeedAnalyserFunction = (\n  stack: Buffer[]\n) => (pos: number) => ScriptInputsNeeds;\n\nfunction validatePosition(stack: Buffer[], pos: number) {\n  return !(pos < 0 || pos >= stack.length);\n}\n\nfunction mergeNeeds(...needs: ScriptInputsNeeds[]): ScriptInputsNeeds {\n  return {\n    sigs: needs.reduce(\n      (acc: ScriptInputsNeeds['sigs'], need) => acc.concat(need.sigs),\n      []\n    ),\n    hasIntrospection: needs.reduce(\n      (acc: ScriptInputsNeeds['hasIntrospection'], need) =>\n        acc || need.hasIntrospection,\n      false\n    ),\n    needParameters: needs.reduce(\n      (acc: ScriptInputsNeeds['needParameters'], need) =>\n        acc || need.needParameters,\n      false\n    ),\n  };\n}\n\nconst needParametersAnalyser: NeedAnalyserFunction = stack => pos => {\n  if (!validatePosition(stack, pos))\n    throw new Error('Invalid position (NEED PARAM OPCODE)');\n  return {\n    sigs: [],\n    hasIntrospection: false,\n    needParameters: true,\n  };\n};\n\nconst introspectionAnalyzer: NeedAnalyserFunction = stack => pos => {\n  if (!validatePosition(stack, pos))\n    throw new Error('invalid position (INTROSPECTION OPCODE)');\n  return {\n    sigs: [],\n    hasIntrospection: true,\n    needParameters: false,\n  };\n};\n\nconst checksigAnalyzer: NeedAnalyserFunction = stack => pos => {\n  if (!validatePosition(stack, pos))\n    throw new Error('invalid position (CHECKSIG)');\n  if (!validatePosition(stack, pos - 1)) {\n    return {\n      sigs: [],\n      hasIntrospection: false,\n      needParameters: true,\n    };\n  }\n\n  const pubkey = stack[pos - 1];\n\n  return {\n    sigs: [{ pubkey: pubkey.toString('hex') }],\n    hasIntrospection: false,\n    needParameters: false,\n  };\n};\n\nconst hex = (n: number) => Buffer.of(n).toString('hex');\n\nconst ANALYZERS_BY_OPCODE = new Map<string, NeedAnalyserFunction>().set(\n  hex(OPS.OP_CHECKSIG),\n  checksigAnalyzer\n);\n\nINTROSPECTION_OPCODES.forEach(op =>\n  ANALYZERS_BY_OPCODE.set(hex(op), introspectionAnalyzer)\n);\nNEED_PARAMS_OPCODES.forEach(op =>\n  ANALYZERS_BY_OPCODE.set(hex(op), needParametersAnalyser)\n);\n\nfunction decompileScript(b: Buffer): Buffer[] {\n  const stack = script.decompile(b);\n  if (stack === null) throw new Error('malformed script');\n  return stack?.map(s => (Buffer.isBuffer(s) ? s : Buffer.of(s))) ?? [];\n}\n\n/**\n * Analyze a script to know what it need as input\n * @param scriptHex must be a valid Elements script\n * @returns an object describing how to build the script inputs\n */\nexport function analyse(scriptHex: string): ScriptInputsNeeds {\n  const scriptBuffer = Buffer.from(scriptHex, 'hex');\n  const stack = decompileScript(scriptBuffer);\n\n  let needs: ScriptInputsNeeds = {\n    sigs: [],\n    hasIntrospection: false,\n    needParameters: false,\n  };\n\n  for (let i = 0; i < stack.length; i++) {\n    const elem = stack[i].toString('hex');\n    const analyser = ANALYZERS_BY_OPCODE.get(elem);\n    if (!analyser) continue;\n    needs = mergeNeeds(needs, analyser(stack)(i));\n  }\n\n  return needs;\n}\n\nexport function analyzeTapscriptTree(\n  tree?: bip341.HashTree\n): Record<string, ScriptInputsNeeds> {\n  if (!tree) return {};\n  const children = {\n    ...(tree.left ? analyzeTapscriptTree(tree.left) : {}),\n    ...(tree.right ? analyzeTapscriptTree(tree.right) : {}),\n  };\n\n  if (tree.scriptHex)\n    return { ...children, [tree.scriptHex]: analyse(tree.scriptHex) };\n  return children;\n}\n","import { bip341 } from 'liquidjs-lib';\n\nexport enum TypeAST {\n  SCRIPT = 0, // one of ScriptType\n  TREE, // {asm(...)|TREE,asm(...)|TREE}\n  HEX, // ? bits hex\n  KEY, // 64 bits hex\n}\n\nexport enum ScriptType {\n  ELTR = 'eltr', // eltr(KEY, TREE)\n  ASM = 'asm', // asm(STRING)\n  RAW = 'raw', // raw(HEX)\n}\n\nconst numOfChildren = new Map<ScriptType, number>()\n  .set(ScriptType.ELTR, 2)\n  .set(ScriptType.ASM, 1)\n  .set(ScriptType.RAW, 1);\n\n// Abstract syntax tree\nexport interface AST<V = any> {\n  type: TypeAST;\n  value: V;\n  children: AST[];\n}\n\nexport interface DescriptorsCompilerAPI {\n  compile: (ast: AST) => TemplateResult;\n}\n\n// (template string, context) --parser--> AST --compiler--> Result object\nexport interface TemplateResult {\n  scriptPubKey(): Buffer; // the address' script\n  redeemScript?(): Buffer; // optional, only if needed to spend the scriptPubKey (e.g. for P2SH, P2WSH, P2WSH-P2SH...)\n  // optional, returns witnesses needed to spend the scriptPubKey\n  // in case of segwit v0 = [redeemScript()]\n  // in case of segwit v1 = [leafScript, taprootControlBlock]\n  witnesses?(...args: any[]): Buffer[];\n  taprootHashTree?: bip341.HashTree; // optional, should be undefined if not an eltr template\n  taprootInternalKey?: string; // optional, should be undefined if not an eltr template\n}\n\nconst withoutEccCompilers = new Map([\n  [ScriptType.RAW, compileRAW],\n  [ScriptType.ASM, compileASM],\n]);\n\nfunction compileFromEcc(ecc: bip341.TinySecp256k1Interface) {\n  // map cmd to compile functions\n  const compilers = withoutEccCompilers.set(\n    ScriptType.ELTR,\n    makeCompileELTR(bip341.BIP341Factory(ecc))\n  );\n\n  return (ast: AST): TemplateResult => {\n    return compileScript(ast, compilers, true);\n  };\n}\n\nexport const DescriptorsCompilerFactory = (\n  ecc: bip341.TinySecp256k1Interface\n): DescriptorsCompilerAPI => {\n  return {\n    compile: compileFromEcc(ecc),\n  };\n};\n\nfunction checkScriptNode(ast: AST, scriptType: ScriptType): void {\n  if (ast.type !== TypeAST.SCRIPT) {\n    throw new Error('Expected script node');\n  }\n\n  if (ast.value !== scriptType) {\n    throw new Error(`Expected ${scriptType} script`);\n  }\n\n  if (ast.children.length !== numOfChildren.get(ast.value)) {\n    throw new Error(\n      `Expected script node ${ast.type} with ${numOfChildren.get(\n        ast.value\n      )} of children`\n    );\n  }\n}\n\nfunction compileHEX(ast: AST): TemplateResult {\n  if (ast.type !== TypeAST.HEX) {\n    throw new Error('Expected hex node');\n  }\n\n  if (typeof ast.value !== 'string')\n    throw new Error('Expected hex node with string value');\n  const script = Buffer.from(ast.value, 'hex');\n  return {\n    scriptPubKey: () => script,\n  };\n}\n\n// 'raw' node\nfunction compileRAW(ast: AST): TemplateResult {\n  checkScriptNode(ast, ScriptType.RAW);\n  return compileHEX(ast.children[0]);\n}\n\n// 'asm' node, which is a subset of raw\nfunction compileASM(ast: AST): TemplateResult {\n  checkScriptNode(ast, ScriptType.ASM);\n  return compileHEX(ast.children[0]);\n}\n\n// this is not a ScriptCompileFunction\n// recursive way to get all the leaves of the tree\nfunction compileTREE(ast: AST): bip341.TaprootLeaf[] {\n  if (ast.type !== TypeAST.TREE) {\n    throw new Error('Expected tree node');\n  }\n\n  const leaves: bip341.TaprootLeaf[] = [];\n  if (ast.children.length < 1 || ast.children.length > 2) {\n    throw new Error('Expected tree node with 1 or 2 leaves');\n  }\n\n  for (const child of ast.children) {\n    switch (child.type) {\n      case TypeAST.SCRIPT:\n        leaves.push({\n          scriptHex: compileScript(child, withoutEccCompilers) // we do not expect any toplevel compilers so we can use withoutEccCompilers\n            .scriptPubKey()\n            .toString('hex'),\n        });\n        break;\n      case TypeAST.TREE:\n        leaves.push(...compileTREE(child));\n        break;\n      default:\n        throw new Error(\n          `Expected tree node with children of type ${TypeAST.SCRIPT} or ${TypeAST.TREE}`\n        );\n    }\n  }\n\n  return leaves;\n}\n\nfunction compileKEY(ast: AST): Buffer {\n  if (ast.type !== TypeAST.KEY) {\n    throw new Error('Expected key node');\n  }\n\n  if (typeof ast.value !== 'string' && ast.value.length === 64)\n    throw new Error('Expected key (64 hex chars)');\n  return Buffer.from(ast.value, 'hex');\n}\n\nfunction makeCompileELTR(bip341lib: bip341.BIP341API) {\n  return function(ast: AST): TemplateResult {\n    checkScriptNode(ast, ScriptType.ELTR);\n\n    if (ast.children[0].type !== TypeAST.KEY) {\n      throw new Error('Expected KEY as first argument of eltr');\n    }\n\n    if (ast.children[1].type !== TypeAST.TREE) {\n      throw new Error('Expected TREE as second argument of eltr');\n    }\n\n    const internalKey = compileKEY(ast.children[0]);\n    const leaves = compileTREE(ast.children[1]);\n\n    const tree = bip341.toHashTree(leaves, true);\n    // this is a trick for the bip341 functions (accept only prefixed keys)\n    const prefixedInternalKey = Buffer.concat([Buffer.of(0x00), internalKey]);\n\n    // segwit v1 scriptPubKey\n    const scriptPubKey = bip341lib.taprootOutputScript(\n      prefixedInternalKey,\n      tree\n    );\n\n    return {\n      witnesses: (leafScript: string): Buffer[] => {\n        const leaf = leaves.find(l => l.scriptHex === leafScript);\n        if (!leaf) {\n          throw new Error(\n            'Could not find leaf script for script ' + leafScript\n          );\n        }\n\n        const path = bip341.findScriptPath(tree, bip341.tapLeafHash(leaf));\n        return bip341lib.taprootSignScriptStack(\n          prefixedInternalKey,\n          leaf,\n          tree.hash,\n          path\n        );\n      },\n      scriptPubKey: () => scriptPubKey,\n      taprootHashTree: tree,\n      taprootInternalKey: internalKey.toString('hex'),\n    };\n  };\n}\n\nconst topLevelOnly = [ScriptType.RAW, ScriptType.ELTR];\n\ntype CompilersMap = Map<ScriptType, ScriptCompileFunction>;\ntype ScriptCompileFunction = (ast: AST) => TemplateResult;\n\n// main compile function\nfunction compileScript(\n  ast: AST,\n  compilersMap: CompilersMap,\n  isTop = false\n): TemplateResult {\n  const compileFunction = compilersMap.get(ast.value);\n  if (!compileFunction) {\n    throw new Error(`node type: ${ast.type} is not a descriptor`);\n  }\n\n  if (!isTop && topLevelOnly.includes(ast.value)) {\n    throw new Error(`node type: ${ast.value} is a top level only descriptor`);\n  }\n\n  return compileFunction(ast);\n}\n","const hexRegExp = /^([A-Fa-f0-9]{2})+/;\n\nexport function readHex(text: string): [string, string] {\n  return readWithRegExp(hexRegExp, text);\n}\n\nfunction readWithRegExp(regexp: RegExp, text: string): [string, string] {\n  const match = text.match(regexp);\n  if (!match) {\n    return ['', text];\n  }\n  return [match[0], text.slice(match[0].length)];\n}\n\nexport function readUntil(text: string, char: string): [string, string] {\n  const index = text.indexOf(char);\n  if (index === -1) {\n    throw new Error(`Expected ${char}`);\n  }\n  return [text.slice(0, index), text.slice(index)];\n}\n","import { script } from 'liquidjs-lib';\nimport { ScriptType, TypeAST, AST } from './ast';\nimport { readHex, readUntil } from './utils';\n\nconst EXPECT_TOKEN = (token: string, got: string) =>\n  new Error(`Expected \"${token}\" got \"${got}\"`);\n\nfunction cmd(type: ScriptType): string {\n  return type.toString();\n}\n\ntype Parser = (text: string) => [AST | undefined, string];\n\nfunction compose(...parsers: Parser[]): Parser {\n  return (text: string) => {\n    let result: AST | undefined;\n    let remainingText = text.trimStart();\n    for (const parser of parsers) {\n      const [child, text] = parser(remainingText);\n      if (child) {\n        if (result) {\n          result.children.push(child);\n        } else {\n          result = child;\n        }\n      }\n      remainingText = text.trimStart();\n    }\n\n    return [result, remainingText];\n  };\n}\n\nfunction oneOf(...parsers: Parser[]): Parser {\n  const errors: Error[] = [];\n  return (text: string) => {\n    for (const parser of parsers) {\n      try {\n        return parser(text);\n      } catch (e) {\n        // ignore\n        if (e instanceof Error) {\n          errors.push(e);\n        }\n      }\n    }\n\n    throw new Error(`one of: ${errors.map(e => e.message).join(', ')}`);\n  };\n}\n\nconst parseHEX: Parser = (text: string) => {\n  const [hex, remainingText] = readHex(text);\n  return [{ type: TypeAST.HEX, value: hex, children: [] }, remainingText];\n};\n\nconst parseKEY: Parser = (text: string) => {\n  const [hex, remainingText] = readHex(text);\n  if (hex.length !== 64) {\n    throw EXPECT_TOKEN('key (hex string with len=64)', hex);\n  }\n\n  return [{ type: TypeAST.KEY, value: hex, children: [] }, remainingText];\n};\n\nconst parseASMScript: Parser = (text: string) => {\n  const [str, remainingText] = readUntil(text, ')');\n  const asmScript = script.fromASM(str);\n  return [\n    { type: TypeAST.HEX, value: asmScript.toString('hex'), children: [] },\n    remainingText,\n  ];\n};\n\n// parse a token, does not create any AST node\nconst parseToken = (token: string): Parser => (text: string) => {\n  if (text.startsWith(token)) {\n    return [undefined, text.slice(token.length)];\n  }\n\n  throw EXPECT_TOKEN(token, text.slice(0, token.length));\n};\n\nconst parseTreeToken: Parser = (text: string) => {\n  const [, remainingText] = parseToken('{')(text);\n  return [\n    { type: TypeAST.TREE, value: undefined, children: [] },\n    remainingText,\n  ];\n};\n\nconst parseEndTreeToken = parseToken('}');\n\n// tree parser\nconst parseTREE: Parser = (text: string) => {\n  if (text.startsWith('{')) {\n    return compose(\n      parseTreeToken,\n      parseTREE,\n      oneOf(\n        compose(parseComma, parseTREE, parseEndTreeToken),\n        parseEndTreeToken\n      )\n    )(text);\n  }\n\n  return parseSCRIPT(text);\n};\n\nconst parseScriptToken = (type: ScriptType): Parser => (text: string) => {\n  const res = compose(parseToken(cmd(type)), parseToken('('))(text);\n  return [{ type: TypeAST.SCRIPT, value: type, children: [] }, res[1]];\n};\n\nconst parseEndCmd = parseToken(')');\nconst parseComma = parseToken(',');\n\nexport const parseSCRIPT: Parser = (text: string) => {\n  return oneOf(parseASM, parseRAW, parseELTR)(text);\n};\n\nconst parseRAW = compose(\n  parseScriptToken(ScriptType.RAW), // raw(\n  parseHEX, // hex of any length\n  parseEndCmd // ')'\n);\n\nconst parseELTR = compose(\n  parseScriptToken(ScriptType.ELTR), // eltr(\n  parseKEY, // 64 hex chars\n  parseComma, // ','\n  parseTREE, // TREE\n  parseEndCmd // ')'\n);\n\nconst parseASM = compose(\n  parseScriptToken(ScriptType.ASM), // asm(\n  parseASMScript, // opcodes\n  parseEndCmd // ')'\n);\n","const namespaceRegexp = new RegExp('[$][a-zA-Z0-9|@_.-]+', 'g');\n\nexport interface Context {\n  // map namespace token to public key\n  namespaces: Map<string, { pubkey: string }>;\n}\n\nfunction replaceAll(str: string, find: string, replace: string): string {\n  return str.split(find).join(replace);\n}\n\nexport function findNamespaces(text: string): Array<string> {\n  const namespaces = Array.from(new Set(text.match(namespaceRegexp)));\n  if (!namespaces) return [];\n  return namespaces.map(n => n.slice(1)); // remove the '$' token\n}\n\nexport function processNamespaces(\n  ctx: Context['namespaces'],\n  text: string\n): string {\n  const namespaces = findNamespaces(text);\n  if (!namespaces.length) return text;\n\n  let processedText = text;\n  for (const namespace of namespaces) {\n    const namespacePublicKey = ctx.get(namespace)?.pubkey;\n    if (!namespacePublicKey)\n      throw new Error(`Could not find namespace context: ${namespace}`);\n    processedText = replaceAll(\n      processedText,\n      '$' + namespace,\n      namespacePublicKey\n    );\n  }\n\n  return processedText;\n}\n\nexport function preprocessor(ctx: Context, text: string): string {\n  return processNamespaces(ctx.namespaces, text);\n}\n","import { bip341 } from 'liquidjs-lib';\nimport { DescriptorsCompilerFactory, TemplateResult } from './ast';\nimport { parseSCRIPT } from './parser';\nimport { Context, findNamespaces, preprocessor } from './preprocessing';\nexport { Context, TemplateResult };\n\n/**\n * evaluate a template string and return witness scripts and redeem script associated with it\n * @param ctx used to replace xpubs with their current derivated public keys\n * @param template the string to evaluate\n **/\n\nexport function makeEvaluateDescriptor(ecc: bip341.TinySecp256k1Interface) {\n  const compile = DescriptorsCompilerFactory(ecc).compile;\n  return function(ctx: Context, template: string): TemplateResult {\n    const processedTemplate = preprocessor(ctx, template);\n    const [ast] = parseSCRIPT(processedTemplate);\n    if (!ast) throw new Error('Failed to parse template');\n    return compile(ast);\n  };\n}\n\n/**\n * validate can be used without a context object to validate the parsability of a template string\n * @param template the template string to validate\n * @returns true if template is OK, false otherwise\n */\nexport function validate(template: string): boolean {\n  const namespaces = findNamespaces(template);\n  if (namespaces.length > 0) {\n    const fakeKey = Buffer.alloc(32).toString('hex');\n    const fakeCtx: Context = {\n      namespaces: new Map(),\n    };\n\n    for (const namespace of namespaces) {\n      fakeCtx.namespaces.set(namespace, { pubkey: fakeKey });\n    }\n\n    template = preprocessor(fakeCtx, template);\n  }\n  try {\n    const [ast] = parseSCRIPT(template);\n    if (!ast) return false;\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n"],"names":["undefined","ZERO","Buffer","alloc","toAssetHash","x","withoutFirstByte","slice","reverse","toString","fromAssetHash","concat","from","toNumber","confidential","confidentialValueToSatoshi","isValidAmount","amount","Number","isSafeInteger","emptyNonce","bufferNotEmptyOrNull","buffer","length","isConfidentialOutput","rangeProof","surjectionProof","nonce","BufferMap","map","Map","bufferToStringPrimitive","valueOf","get","key","set","value","values","Array","prefixes","changeVersionBytes","xpub","targetFormat","has","trim","data","b58","decode","encode","err","Error","fromXpub","xub","chain","format","toXpub","anyPub","extendedPubKeyRegexp","masterBlindKeyRegexp","isValidXpub","test","isValidExtendedBlindKey","masterBlind","psetToUnsignedHex","psetBase64","pset","Psbt","fromBase64","ignore","globalMap","unsignedTx","toBuffer","psetToUnsignedTx","ptx","Transaction","fromHex","toOutpoint","txid","vout","getNetwork","str","networks","liquid","unblindOutput","utxo","blindPrivKey","prevout","unblindData","asset","assetBlindingFactor","valueBlindingFactor","unblindOutputWithKey","getIndexFromAddress","addr","derivationPath","derivationPathSplitted","split","parseInt","checkIdentityType","actual","expect","checkMnemonic","mnemonic","language","setDefaultWordlist","validateMnemonic","decodePset","getScripts","addresses","Set","a","address","toOutputScript","confidentialAddress","groupBy","xs","reduce","rv","k","row","IdentityType","isUnblindedOutput","output","getSats","getAsset","Identity","args","hasOwnProperty","type","network","ecclib","blindPsetWithBlindKeysGetter","getBlindingKeyPair","outputsToBlind","outputsPubKeys","inputsBlindingDataLike","inputsData","outputsKeys","transaction","index","pubKey","script","outs","publicKey","inputs","input","witnessUtxo","nonWitnessUtxo","ins","witness","fromBuffer","privKey","privateKey","blinders","blindOutputsByIndex","ECCKeysGenerator","blinded","toBase64","privateBlindKeyGetter","identity","getBlindingPrivateKey","MasterPublicKey","INITIAL_INDEX","opts","masterPublicKey","masterBlindingKey","masterPublicKeyNode","BIP32Factory","fromBase58","masterBlindingKeyNode","SLIP77Factory","fromMasterBlindingKey","baseDerivationPath","INITIAL_BASE_PATH","blindPset","isAbleToSign","derivePublicKeyWithIndex","isChange","changeIndex","baseNode","derive","child","scriptPubKey","checkScript","addressInterface","scriptToAddressCache","scriptFromPublicKey","payments","p2wpkh","pubkey","createConfidentialAddress","signingPublicKey","blindingPublicKey","blindkey","persistAddressToCache","publicKeyBuffer","getAddress","blindingKeyPair","path","newAddressGeneration","blindingPrivateKey","getNextAddress","getNextChangeAddress","signPset","_","getAddresses","Object","addrExtended","getXPub","toBase58","Mnemonic","bip39","walletSeed","passphrase","bip32","masterPrivateKeyNode","fromSeed","derivePath","neutered","masterKey","wif","toWIF","ECPairFactory","fromWIF","signInputPromises","addressGeneration","privateKeyBuffer","signingKeyPair","fromPrivateKey","push","signInputAsync","Promise","all","Random","randomMnemonic","PrivateKey","decodeFromWif","signingKeyWIF","blindingKeyWIF","equals","scriptPubKeyBuffer","indexOfInputs","BrowserInject","Inject","window","windowProvider","provider","signTransaction","__","___","____","p2msPayment","keys","blindingKey","required","multisigPayment","p2wsh","redeem","p2ms","m","pubkeys","bip67sort","witnessScript","blindingKeyFromXPubs","extendedKeys","chainCodes","chainCode","seed","blindingKeyFromChainCode","prefix","chainCodesXOR","xor","crypto","sha256","b","result","i","array","sort","bip67compareFunction","DEFAULT_BASE_DERIVATION_PATH","MultisigWatchOnly","checkRequiredSignature","requiredSignatures","cosigners","cosignersPublicKeys","cosigner","cosignerToXPub","forEach","blindingKeyMasterNode","getMultisigAddress","EXTERNAL_INDEX","nextIndex","resolve","INTERNAL_INDEX","nextChangeIndex","externals","internals","outputsIndexToBlind","outputsPubKeysByIndex","change","payment","cosignersLength","mnemonicToSeedSync","fromPublicKey","Multisig","signer","scriptToPath","next","toScript","throwErrorHandler","need","makeChanges","changeAddressGetter","toSelect","selectedUtxos","recipients","changeAmount","diff","utxos","sum","sumUtxos","filter","makeAssetFilter","coinSelect","compareFn","errorHandler","selectors","coinSelectorFilter","coinSelectUtxosFilter","flatMap","fnSelect","reduceRecipients","recipient","recipientsReducer","results","assetToFilter","u","amtSelected","assetsUtxos","selected","checkCoinSelect","check","outputs","groupByAsset","inputsByAsset","outputsByAsset","inputsAssets","outputsAssets","every","includes","sumInputs","sumNumbers","sumOutputs","acc","current","defaultCompareFn","greedyCoinSelector","sortFn","coinSelectFn","unspents","makeChangesFn","recipientsMap","changeOutputs","fetchTxHex","txId","url","axios","fetchTx","esploraTxToTxInterface","fetchUtxos","esploraUtxos","outpointToUtxo","esploraURL","outpoint","prevoutHex","esploraTx","explorerUrl","inputTxIds","inputVouts","vin","is_pegin","prevoutTxHexs","prevoutAsOutput","hex","makeOutput","txInputs","isPegin","txHex","makeOutpoint","makeOutputFromTxout","txout","txOutputs","tx","fee","status","confirmed","blockHash","block_hash","blockHeight","block_height","blockTime","block_time","txOutput","makeUnblindURL","baseURL","txID","outputsBlinder","outputsString","assetBlinder","valueBlinder","join","getUnblindURLFromTx","outputsData","reverseHex","blinder","UnblindError","fetchAndUnblindTxsGenerator","blindingKeyGetter","skip","txIDs","errors","txsGenerator","fetchTxsGenerator","txIterator","done","unblindTransaction","unblindedTx","errs","fetchAndUnblindTxs","generator","txs","iterator","lastSeenTxid","newTxs","numberOfTxs","fetch25newestTxsForAddress","blindingPrivateKeyGetter","promises","inputIndex","promise","unblinded","outputIndex","response","fetchAndUnblindUtxosGenerator","addressesAndBlindingKeys","numberOfUtxos","addressPublicKey","fromConfidential","blindedUtxos","blindedUtxo","tryToUnblindUtxo","fetchAndUnblindUtxos","utxosGenerator","utxosFromTransactions","walletScripts","initialState","orInfinity","Infinity","compareBlockHeight","compareVin","compare","utxoSet","withoutSpentUtxo","removeInputsFromUtxos","addOutputsToUtxos","isWalletOutput","o","walletOutputs","utxosFetchGenerator","api","privateBlindingKey","unblindedUtxo","console","log","txsFetchGenerator","fetchTxs","transactions","fetchAllTxs","fetchAllUtxos","Electrs","axiosIns","electrsURL","create","fromURL","addressesHasBeenUsed","hasBeenUsed","reqs","allSettled","responses","resolvedResponses","r","flat","fetchAllTxsForAddress","esploraTxs","ids","fetchTxsHex","h","txids","nextTxs","ElectrsBatchServer","batchServerURL","fromURLs","electrsUrl","post","isArray","fetchTxFn","makePrevout","find","t","craftSingleRecipientPset","coinSelector","changeAddressByAsset","substractFeeFromRecipient","satsPerByte","DEFAULT_SATS_PER_BYTE","laddress","substractScenario","assetHash","firstSelection","createFeeOutput","addToTx","validateAndProcess","addFee","craftMultipleRecipientsPset","createFeeOutputFromPset","nbInputs","nbOutputs","feeAssetHash","numInputs","numOutputs","sizeEstimation","estimateTxSize","feeEstimation","Math","ceil","addOutput","AssetHash","bytes","satoshiToConfidentialValue","unspent","addInput","hash","base","calcTxSize","total","weight","vsize","withWitness","isConfidential","inputsSize","calcInputsSize","outputsSize","calcOutputsSize","varIntSerializeSize","size","baseOutputSize","val","maxUINT16","maxUINT32","Wallet","createTx","buildTx","sendTx","substractFee","walletFromAddresses","walletFromCoins","coins","balances","unspentsByAsset","entries","sumSats","inputBlindingDataMap","inputBlindingData","txidToBuffer","outputBlindingPubkeysMap","outputAddresses","outPubkeys","outAddress","outputIndexFromAddress","isConfidentialAddress","blindingKeyFromAddress","addressToFind","utx","recipientScript","findIndex","out","BLOCKSTREAM_ESPLORA_ENDPOINT","restorerFromEsplora","gapLimit","restoreFunc","getAddrFunc","counter","maxIndex","cpyNext","addrs","addressHasBeenUsed","hasBeenUsedArray","indexInArray","restorerExternal","restorerInternal","lastUsedExternalIndex","lastUsedInternalIndex","restorerFromState","mnemonicRestorerFromEsplora","mnemonicToRestore","masterPubKeyRestorerFromEsplora","toRestore","multisigWatchOnlyFromEsplora","multisigFromEsplora","mnemonicRestorerFromState","masterPubKeyRestorerFromState","makeRestorerFromChainAPI","id","mnemonicRestorerFromChain","OPS","NEED_PARAMS_OPCODES","OP_PUSHDATA1","OP_PUSHDATA2","OP_PUSHDATA4","OP_1NEGATE","OP_RESERVED","OP_IF","OP_VERIF","OP_VERNOTIF","OP_ELSE","OP_ENDIF","OP_VERIFY","OP_TOALTSTACK","OP_FROMALTSTACK","OP_2DROP","OP_2DUP","OP_3DUP","OP_2OVER","OP_2ROT","OP_2SWAP","OP_NIP","OP_OVER","OP_PICK","OP_ROLL","OP_ROT","OP_SWAP","OP_TUCK","OP_CAT","OP_SUBSTR","OP_SUBSTR_LAZY","OP_LEFT","OP_RIGHT","OP_SIZE","OP_INVERT","OP_AND","OP_OR","OP_XOR","OP_EQUAL","OP_EQUALVERIFY","OP_RESERVED1","OP_RESERVED2","OP_1ADD","OP_1SUB","OP_2MUL","OP_2DIV","OP_NEGATE","OP_ABS","OP_NOT","OP_0NOTEQUAL","OP_ADD","OP_SUB","OP_MUL","OP_DIV","OP_MOD","OP_LSHIFT","OP_RSHIFT","OP_BOOLAND","OP_BOOLOR","OP_NUMEQUAL","OP_NUMEQUALVERIFY","OP_NUMNOTEQUAL","OP_LESSTHAN","OP_GREATERTHAN","OP_LESSTHANOREQUAL","OP_GREATERTHANOREQUAL","OP_MIN","OP_MAX","OP_WITHIN","OP_RIPEMD160","OP_SHA1","OP_SHA256","OP_HASH160","OP_HASH256","OP_CODESEPARATOR","OP_CHECKMULTISIG","OP_CHECKMULTISIGVERIFY","OP_DETERMINISTICRANDOM","OP_SHA256INITIALIZE","OP_SHA256UPDATE","OP_SHA256FINALIZE","OP_ADD64","OP_SUB64","OP_MUL64","OP_DIV64","OP_NEG64","OP_LESSTHAN64","OP_LESSTHANOREQUAL64","OP_GREATERTHAN64","OP_GREATERTHANOREQUAL64","OP_SCRIPTNUMTOLE64","OP_LE64TOSCRIPTNUM","OP_LE32TOLE64","OP_ECMULSCALARVERIFY","OP_TWEAKVERIFY","OP_PUBKEYHASH","OP_PUBKEY","OP_INVALIDOPCODE","INTROSPECTION_OPCODES","OP_INSPECTINPUTOUTPOINT","OP_INSPECTINPUTASSET","OP_INSPECTINPUTVALUE","OP_INSPECTINPUTSCRIPTPUBKEY","OP_INSPECTINPUTSEQUENCE","OP_INSPECTINPUTISSUANCE","OP_PUSHCURRENTINPUTINDEX","OP_INSPECTOUTPUTASSET","OP_INSPECTOUTPUTVALUE","OP_INSPECTOUTPUTNONCE","OP_INSPECTOUTPUTSCRIPTPUBKEY","OP_INSPECTVERSION","OP_INSPECTLOCKTIME","OP_INSPECTNUMINPUTS","OP_INSPECTNUMOUTPUTS","validatePosition","stack","pos","mergeNeeds","needs","sigs","hasIntrospection","needParameters","needParametersAnalyser","introspectionAnalyzer","checksigAnalyzer","n","of","ANALYZERS_BY_OPCODE","OP_CHECKSIG","op","decompileScript","decompile","s","isBuffer","analyse","scriptHex","scriptBuffer","elem","analyser","analyzeTapscriptTree","tree","children","left","right","TypeAST","ScriptType","numOfChildren","ELTR","ASM","RAW","withoutEccCompilers","compileRAW","compileASM","compileFromEcc","ecc","compilers","makeCompileELTR","bip341","BIP341Factory","ast","compileScript","DescriptorsCompilerFactory","compile","checkScriptNode","scriptType","SCRIPT","compileHEX","HEX","compileTREE","TREE","leaves","compileKEY","KEY","bip341lib","internalKey","toHashTree","prefixedInternalKey","taprootOutputScript","witnesses","leafScript","leaf","l","findScriptPath","tapLeafHash","taprootSignScriptStack","taprootHashTree","taprootInternalKey","topLevelOnly","compilersMap","isTop","compileFunction","hexRegExp","readHex","text","readWithRegExp","regexp","match","readUntil","char","indexOf","EXPECT_TOKEN","token","got","cmd","compose","parsers","remainingText","trimStart","parser","oneOf","e","message","parseHEX","parseKEY","parseASMScript","asmScript","fromASM","parseToken","startsWith","parseTreeToken","parseEndTreeToken","parseTREE","parseComma","parseSCRIPT","parseScriptToken","res","parseEndCmd","parseASM","parseRAW","parseELTR","namespaceRegexp","RegExp","replaceAll","replace","findNamespaces","namespaces","processNamespaces","ctx","processedText","namespace","namespacePublicKey","preprocessor","makeEvaluateDescriptor","template","processedTemplate","validate","fakeKey","fakeCtx"],"mappings":"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"}