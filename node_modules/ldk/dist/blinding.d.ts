/// <reference types="node" />
import { confidential } from 'liquidjs-lib';
import { UnblindedOutput } from './types';
/**
 * iterates through pset's inputs and try to find the prevout blinders.
 * @param pset the unsigned pset to blind
 * @param utxos a set of coins (should contain all the pset prevouts to build the whole map)
 * @returns a map inputIndex => blinders data which can be used as input of blindOutputByIndex.
 */
export declare function inputBlindingDataMap(pset: string, utxos: UnblindedOutput[]): Map<number, confidential.UnblindOutputResult>;
/**
 * find the blinding public key associated with output script using a set of addresses.
 * @param pset the unsigned pset to blind
 * @param outputAddresses a set of addresses used to craft the pset outputs.
 * @returns the blinding public mapped to output index. Can be used as input in blindOutputByIndex.
 */
export declare function outputBlindingPubkeysMap(pset: string, outputAddresses: string[]): Map<number, Buffer>;
