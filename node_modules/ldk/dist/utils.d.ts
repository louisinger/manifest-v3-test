/// <reference types="node" />
import { Psbt, Transaction } from 'liquidjs-lib';
import { Network } from 'liquidjs-lib/src/networks';
import { AddressInterface, Outpoint, Output, IdentityType, NetworkString, UnblindedOutput } from './types';
export declare function toAssetHash(x: Buffer): string;
export declare function fromAssetHash(x: string): Buffer;
export declare function toNumber(x: Buffer): number;
export declare function isValidAmount(amount: number): boolean;
/**
 * The unblind output function's result interface.
 */
export interface UnblindResult {
    asset: Buffer;
    value: number;
}
/**
 * Checks if a given output is a confidential one.
 * @param output the ouput to check.
 */
export declare function isConfidentialOutput({ rangeProof, surjectionProof, nonce, }: any): boolean;
export declare class BufferMap<T> {
    private map;
    constructor();
    private bufferToStringPrimitive;
    get(key: Buffer): T | undefined;
    set(key: Buffer, value: T): this;
    values(): T[];
}
export declare function fromXpub(xub: string, chain: NetworkString): string;
export declare function toXpub(anyPub: string): string;
export declare function isValidXpub(xpub: string): boolean;
export declare function isValidExtendedBlindKey(masterBlind: string): boolean;
export declare function psetToUnsignedHex(psetBase64: string): string;
export declare function psetToUnsignedTx(ptx: string): Transaction;
export declare function toOutpoint({ txid, vout }: Output): Outpoint;
export declare function getNetwork(str?: NetworkString): Network;
/**
 * Compute the blinding data for a given output
 * @param utxo blinded utxo
 * @param blindPrivKey blinding private key
 */
export declare function unblindOutput(utxo: Output, blindPrivKey: string): Promise<UnblindedOutput>;
export declare function getIndexFromAddress(addr: AddressInterface): number;
export declare function checkIdentityType(actual: IdentityType, expect: IdentityType): void;
export declare function checkMnemonic(mnemonic: string, language?: string): void;
export declare function decodePset(psetBase64: string): Psbt;
export declare function getScripts(addresses: AddressInterface[]): Set<string>;
export declare function groupBy<T extends Record<string, any>>(xs: T[], key: (t: T) => string): Record<string, T[]>;
